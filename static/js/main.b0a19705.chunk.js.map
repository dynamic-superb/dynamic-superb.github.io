{"version":3,"sources":["components/Sections.js","components/AdaptiveLink.js","components/Buttons.js","components/Utilies.js","components/Theme.js","Data.js","components/Titles.js","Landing.js","News.js","components/LiftedOnHover.js","Tasks.js","context/auth-context.js","components/FormTextfield.js","components/PublicForm.js","components/HiddenForm.js","Rules.js","leaderboardData.js","Leaderboard.js","policy.js","Challenge.js","hooks/markdown-file.js","components/MarkdownBlock.js","CallForTask.js","review_process.js","components/Drawer.js","components/NavigationBar.js","components/Modal.js","Profile.js","hooks/auth-hook.js","task_submission.js","score_submission.js","App.js","reportWebVitals.js","index.js"],"names":["SectionTemplate","props","theme","useTheme","anchorKey","remainedProps","_jsxs","React","Fragment","children","_jsx","Box","id","position","top","spacing","visibility","Section","margin","SubSection","useStyles","makeStyles","AdaptiveLink","link","Link","HashLink","location","useLocation","component","fontWeight","pathname","includes","className","href","target","to","descriptionButton","display","pseudoOutlinedPrimaryButton","backgroundColor","border","concat","fade","palette","primary","main","borderRadius","shape","innerButton","paddingLeft","paddingRight","DescriptionButton","name","classes","Button","size","variant","Strong","fontStyle","mainTheme","grey","text","blueGrey","secondary","constrainedTheme","update","$set","red","lessConstrainedTheme","orange","unconstrainedTheme","green","submitFormTheme","public_task_columnInfo","LockIcon","createMuiTheme","LockOpenIcon","AllInclusive","PR_per_public","header","width","higherBetter","isScore","type","KS_acc_public","IC_acc_public","SID_acc_public","ER_acc_public","ERfold1_acc_public","ERfold2_acc_public","ERfold3_acc_public","ERfold4_acc_public","ERfold5_acc_public","ASR_wer_public","ASR_LM_wer_public","QbE_mtwv_public","SF_f1_public","SF_cer_public","SV_eer_public","SD_der_public","ST_bleu_public","SE_pesq_public","SE_stoi_public","SS_sisdri_public","hidden_task_columnInfo","PR_per_hidden_dev","SID_acc_hidden_dev","ER_acc_hidden_dev","ASR_wer_hidden_dev","QbE_map_hidden_dev","QbE_eer_hidden_dev","SV_eer_hidden_dev","SD_der_hidden_dev","ST_bleu_hidden_dev","SS_sisdri_hidden_dev","SE_stoi_hidden_dev","SE_pesq_hidden_dev","map","item","TitleTemplate","title","titleColor","titleVariant","titleComponent","description","descriptionColor","descriptionVariant","textMaxWidth","divider","titleAlign","maxWidth","textAlign","Typography","color","Divider","Title","Landing","ref","useRef","setWidth","useState","useEffect","current","offsetWidth","Math","min","useMediaQuery","breakpoints","up","rel","src","smooth","Grid","container","justify","filename","xs","sm","md","Date","taskName","marginBottom","News","LiftedPaper","elevation","liftDegree","hover","setHover","Paper","onMouseOver","prev","onMouseOut","Tasks","sx","overflow","TableContainer","tableLayout","Table","stickyHeader","TableHead","TableRow","TableCell","align","style","minWidth","TableBody","baseline","seen","instance","scope","Instance","AuthContext","createContext","isLoggedIn","userId","token","isAdmin","email","login","logout","paper","padding","background","fontSize","root","marginLeft","marginRight","textField","marginTop","raw_data","SpeechDetection","LJSpeech","SpeechTextMatching","SpokenTermDetection","EnhancementDetection","NoiseDetection","NoiseSNRLevelPrediction","ReverberationDetection","DialogueEmotionClassification","DailyTalk","EmotionRecognition","MultimodalEmotionlinesDataset","SpoofDetection","ASVspoof2015","ASVspoof2017","DialogueActClassification","DialogueActPairing","SpeakerCounting","SpeakerVerification","VCTK","Whisper","raw_data_seen","instances","raw_data_unseen","column_fields","models","columns","field","column","headerAlign","headerClassName","push","rows","idCounter","model","row","task","Object","keys","sum","score","round","length","columns_transpose","renderCell","params","value","best","acc_to_float","acc","parseFloat","slice","rows_transpose_seen","rows_transpose_unseen","rows_transpose_all","index","instances_seen","instances_unseen","underscore","indexOf","dataset","row_seen","Task","Dataset","row_unseen","row_all","reduce","a","b","StyledDataGrid","styled","DataGrid","_ref","borderRight","App","setrows","setcolumns","setValue","anchorEl","setAnchorEl","infoOpen","Boolean","infoId","undefined","height","justifyContent","alignItems","gap","IconButton","onClick","event","currentTarget","HelpIcon","Popover","open","onClose","CloseInfo","anchorOrigin","vertical","horizontal","transformOrigin","Tabs","indicatorColor","textColor","onChange","handleChange","newValue","Tab","label","disableRowSelectionOnClick","hideFooter","String","raw","_templateObject","_taggedTemplateLiteral","ProSidebar","left","boxShadow","BtnToggle","useMarkdown","url","markdownText","setMarkdownText","fetch","then","res","MarkdownBlock","mdFile","ReactMarkdown","remarkPlugins","remarkMath","remarkGfm","rehypePlugins","rehypeKatex","components","code","_ref2","node","inline","match","exec","SyntaxHighlighter","replace","language","PreTag","colorTheme","showLineNumbers","_ref3","p","_ref4","level","toString","h1","_ref5","h2","_ref6","h3","_ref7","h4","_ref8","h5","_ref9","CallForTask","call_for_task","ReviewProcess","review_process","list","fullList","SwipeableTemporaryDrawer","state","setState","bottom","right","toggleDrawer","anchor","key","clsx","role","onKeyDown","List","items","SwipeableDrawer","onOpen","HideOnScroll","window","trigger","useScrollTrigger","Slide","appear","direction","in","ScrollTop","history","useHistory","disableHysteresis","threshold","Zoom","ownerDocument","document","querySelector","scrollIntoView","block","toolbar","tool","paddingTop","paddingBottom","button","cursor","navlink","LiftingBarButton","withWidth","tableControlRef","anchorElUser","setAnchorElUser","useContext","handleOpenUserMenu","handleCloseUserMenu","items1","Array","isArray","flexGrow","Menu","mt","keepMounted","onMouseLeave","MenuItem","CssBaseline","AppBar","Toolbar","lg","click","Hidden","mdDown","lgUp","Drawer","onclick","ListItem","ListItemText","Fab","KeyboardArrowUpIcon","modal","div","logoutTimer","TaskSubmission","task_submission","ScoreSubmission","narrowViewport","LoginButton","setHeight","navbarHeight","setNavbarHeight","setViewPort","innerWidth","innerHeight","getElementById","offsetHeight","addEventListener","routes","Switch","Route","path","exact","LeaderBoard","Router","NavigationBar","useAuth","setToken","setIsAdmin","setEmail","tokenExpirationDate","setTokenExpirationDate","signOut","useGoogleLogout","clientId","onLogoutSuccess","onFailure","useCallback","expirationDate","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","removeItem","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SACE,mEACF,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SACE,0EACF,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,2BACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,wCACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,wCACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,8BACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,2CACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,2CACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,+BACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,4CACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,4CACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,kDACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,kCACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,+CACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,yCACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,qCACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,sCACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,kCACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,sCACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,kCACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,uCACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,mCACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,8CACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,2CACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,2CACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,4CACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,uDACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,mDACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,wDACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,oDACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,uDACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,mDACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,wCACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,0CACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,mDACV,YAAa,QACbwC,QAAS,QACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,yBACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,wBACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,8BACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,8BACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,sCACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,mDACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,qDACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,mDACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,2BACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,+BACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,qCACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,4CACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,2BACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,IAEjB,CACExC,SAAU,8CACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,IAEjB,CACExC,SAAU,6BACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,MAKfG,GAAkB,CACtBD,UAAW,CACT,CACE1C,SAAU,gCACV,YAAa,QACbwC,QAAS,QACT,gBAAiB,SACjB,cAAe,SACf,cAAe,UAEjB,CACExC,SAAU,6CACV,YAAa,QACbwC,QAAS,QACT,gBAAiB,SACjB,cAAe,SACf,cAAe,SAEjB,CACExC,SAAU,iDACV,YAAa,QACbwC,QAAS,QACT,gBAAiB,SACjB,cAAe,SACf,cAAe,UAEjB,CACExC,SAAU,gEACV,YAAa,QACbwC,QAAS,QACT,gBAAiB,SACjB,cAAe,QACf,cAAe,SAEjB,CACExC,SACE,iEACF,YAAa,QACbwC,QAAS,QACT,gBAAiB,SACjB,cAAe,QACf,cAAe,UAEjB,CACExC,SACE,mEACF,YAAa,QACbwC,QAAS,QACT,gBAAiB,SACjB,cAAe,QACf,cAAe,SAEjB,CACExC,SACE,0EACF,YAAa,QACbwC,QAAS,QACT,gBAAiB,SACjB,cAAe,QACf,cAAe,SAEjB,CACExC,SAAU,2BACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,wCACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,wCACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,8BACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,2CACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,2CACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,+BACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,4CACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,4CACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,kDACV,YAAa,QACbwC,QAAS,QACT,gBAAiB,QACjB,cAAe,QACf,cAAe,UAEjB,CACExC,SAAU,kCACV,YAAa,QACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,UAEjB,CACExC,SAAU,+CACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,yCACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,qCACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,sCACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,UAEjB,CACExC,SAAU,kCACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,UAEjB,CACExC,SAAU,sCACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,UAEjB,CACExC,SAAU,kCACV,YAAa,QACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,UAEjB,CACExC,SAAU,uCACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,UAEjB,CACExC,SAAU,mCACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,UAEjB,CACExC,SAAU,8CACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,2CACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,UAEjB,CACExC,SAAU,2CACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,UAEjB,CACExC,SAAU,4CACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,UAEjB,CACExC,SAAU,uDACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,UAEjB,CACExC,SAAU,mDACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,UAEjB,CACExC,SAAU,wDACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,UAEjB,CACExC,SAAU,oDACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,UAEjB,CACExC,SAAU,uDACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,mDACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,wCACV,YAAa,QACbwC,QAAS,QACT,gBAAiB,SACjB,cAAe,QACf,cAAe,SAEjB,CACExC,SAAU,0CACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,mDACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,yBACV,YAAa,QACbwC,QAAS,QACT,gBAAiB,QACjB,cAAe,QACf,cAAe,SAEjB,CACExC,SAAU,wBACV,YAAa,SACbwC,QAAS,SACT,gBAAiB,SACjB,cAAe,SACf,cAAe,UAEjB,CACExC,SAAU,8BACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,8BACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,sCACV,YAAa,GACbwC,QAAS,GACT,gBAAiB,GACjB,cAAe,GACf,cAAe,UAEjB,CACExC,SAAU,mDACV,YAAa,QACbwC,QAAS,QACT,gBAAiB,SACjB,cAAe,SACf,cAAe,UAEjB,CACExC,SAAU,qDACV,YAAa,QACbwC,QAAS,QACT,gBAAi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","file":"static/js/main.b0a19705.chunk.js","sourcesContent":["import React from \"react\";\nimport { useTheme } from \"@material-ui/styles\";\nimport { Box } from \"@material-ui/core\";\n\nfunction SectionTemplate(props) {\n  const theme = useTheme();\n  const { anchorKey, ...remainedProps } = props;\n\n  return (\n    <React.Fragment>\n      <Box\n        id={anchorKey}\n        position=\"relative\"\n        top={theme.spacing(-4)}\n        visibility=\"hidden\"\n      ></Box>\n      <Box {...remainedProps} />\n    </React.Fragment>\n  );\n}\n\nfunction Section(props) {\n  const theme = useTheme();\n\n  return <SectionTemplate margin={theme.spacing(4, \"auto\", 8)} {...props} />;\n}\n\nfunction SubSection(props) {\n  const theme = useTheme();\n\n  return <SectionTemplate margin={theme.spacing(4, \"auto\", 6)} {...props} />;\n}\n\nfunction SubSubSection(props) {\n  const theme = useTheme();\n\n  return <SectionTemplate margin={theme.spacing(4, \"auto\", 4)} {...props} />;\n}\n\nexport { Section, SubSection, SubSubSection };\n","import React from 'react';\nimport { HashLink } from 'react-router-hash-link';\nimport {\n  useLocation,\n} from \"react-router-dom\";\nimport { Box } from '@material-ui/core';\nimport { useTheme } from '@material-ui/core/styles';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles((theme) => ({\n}));\n\n\nexport default function AdaptiveLink(props) {\n  const { link, children } = props;\n  const Link = link ? HashLink : Box;\n  const location = useLocation();\n  const theme = useTheme();\n  const classes = useStyles();\n\n  return (\n    <Box component=\"span\" fontWeight={location.pathname.includes(link) ? \"bold\" : \"inherit\"}>\n      {\n        (link ? link : \"\").includes(\"http\") ?\n          <a className=\"unlink\" href={link ? link : \"\"} target=\"_blank\">\n            {children}\n          </a>\n          :\n          <Link className=\"unlink\" to={link ? link : \"\"}>\n            {children}\n          </Link>\n      }\n    </Box>\n  )\n}","import React from \"react\";\nimport { makeStyles, fade } from \"@material-ui/core/styles\";\nimport { Box, Grid, Button, Divider } from \"@material-ui/core\";\n\nimport AdaptiveLink from \"./AdaptiveLink\";\n\nconst useStyles = makeStyles((theme) => ({\n  descriptionButton: {\n    display: \"inline-block\",\n    margin: theme.spacing(1),\n  },\n\n  pseudoOutlinedPrimaryButton: {\n    backgroundColor: \"transparent\",\n    border: `1px solid ${fade(theme.palette.primary.main, 0.5)}`,\n    borderRadius: theme.shape.borderRadius,\n    display: \"inline-block\",\n  },\n\n  innerButton: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n  },\n}));\n\nfunction DescriptionButton(props) {\n  const { name, link } = props;\n  const classes = useStyles();\n  return (\n    <AdaptiveLink link={link}>\n      <Button\n        size=\"small\"\n        variant=\"outlined\"\n        className={classes.descriptionButton}\n      >\n        {name}\n      </Button>\n    </AdaptiveLink>\n  );\n}\n\nfunction MultiLinkButton(props) {\n  const {\n    buttons = [\n      {\n        name: \"rules\",\n        link: \"/submit#rules\",\n      },\n      {\n        name: \"submit\",\n        link: \"/submit#submit\",\n      },\n    ],\n  } = props;\n  const classes = useStyles();\n\n  return (\n    <div className={classes.pseudoOutlinedPrimaryButton}>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n        spacing={0}\n      >\n        {buttons.map(({ name, link }, index) => (\n          <React.Fragment>\n            <Grid item>\n              <AdaptiveLink link={link}>\n                <Button\n                  disabled={!link}\n                  color=\"primary\"\n                  className={classes.innerButton}\n                >\n                  {name}\n                </Button>\n              </AdaptiveLink>\n            </Grid>\n            {index < buttons.length - 1 && (\n              <Grid item>\n                <Box height={28}>\n                  <Divider orientation=\"vertical\" />\n                </Box>\n              </Grid>\n            )}\n          </React.Fragment>\n        ))}\n      </Grid>\n    </div>\n  );\n}\n\nexport { DescriptionButton, MultiLinkButton };\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction CapitalizeLetter(string) {\n  return string.replace(/^\\w|-\\w/g, c => c.toUpperCase()).replace(/-/g, ' ');\n}\n\nfunction Strong(props) {\n  return (\n    <Box component=\"span\" fontWeight=\"bold\" fontStyle=\"italic\">\n      {props.children}\n    </Box>\n  );\n}\n\nfunction is_number_and_not_nan(value) {\n  return (typeof (value) == \"number\") && (!isNaN(value))\n}\n\nfunction NumericalSort(rowA, rowB, columnId, desc) {\n  const valueA = rowA.original[columnId];\n  const valueB = rowB.original[columnId];\n  const isNumberA = is_number_and_not_nan(valueA)\n  const isNumberB = is_number_and_not_nan(valueB)\n  if (!isNumberA && isNumberB) {\n    return desc ? -1 : 1;\n  }\n  else if (isNumberA && !isNumberB) {\n    return desc ? 1 : -1;\n  }\n  else if (!isNumberA && !isNumberB) {\n    if (desc) {\n      return rowA.original[\"submitName\"] < rowB.original[\"submitName\"] ? 1 : -1\n    }\n    else {\n      return rowA.original[\"submitName\"] < rowB.original[\"submitName\"] ? -1 : 1\n    }\n  }\n  else {\n    return valueA > valueB ? 1 : -1;\n  }\n}\n\nexport { capitalizeFirstLetter, Strong, NumericalSort, is_number_and_not_nan, CapitalizeLetter };\n","import { blueGrey, grey, red, orange, green } from \"@material-ui/core/colors\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport update from \"immutability-helper\";\n\nconst mainTheme = {\n    palette: {\n        primary: {\n            main: grey[100],\n        },\n        text: {\n            primary: blueGrey[600],\n            secondary: grey[600],\n        },\n    },\n};\n\nconst constrainedTheme = update(mainTheme, {\n    palette: {\n        primary: {\n            main: { $set: red[400] },\n        },\n    },\n});\n\nconst lessConstrainedTheme = update(mainTheme, {\n    palette: {\n        primary: {\n            main: { $set: orange[400] },\n        },\n    },\n});\n\nconst unconstrainedTheme = update(mainTheme, {\n    palette: {\n        primary: {\n            main: { $set: green[400] },\n        },\n    },\n});\n\nconst submitFormTheme = update(mainTheme, {\n    palette: {\n        primary: {\n            main: { $set: blueGrey[600] },\n        },\n    },\n});\n\nexport {\n    mainTheme,\n    constrainedTheme,\n    lessConstrainedTheme,\n    unconstrainedTheme,\n    submitFormTheme,\n};\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport LockOpenIcon from \"@material-ui/icons/LockOpen\";\nimport AllInclusive from \"@material-ui/icons/AllInclusive\";\n\nimport {\n    constrainedTheme,\n    lessConstrainedTheme,\n    unconstrainedTheme,\n    submitFormTheme,\n} from \"./components/Theme\";\nimport { Strong } from \"./components/Utilies\";\n\nconst subscribe_link = \"https://forms.gle/sVMWx9FHjL4DvK3K8\"\n\nconst domains = [\n    {\n        name: \"recognition\",\n        description: \"recognition description\",\n        tasks: [\n            {\n                name: \"PR\",\n                description:\n                    \"\\\n            Phoneme Recognition, PR transcribes an utterance into the smallest content units.\\\n            We include alignment modeling in the PR task to avoid the potential inaccurate forced alignment.\\\n            LibriSpeech train-clean-100/dev-clean/test-clean subsets are adopted in SUPERB for training/validation/testing.\\\n            Phoneme transcriptions are obtained from the LibriSpeech official g2p-model-5 and the conversion script in Kaldi librispeech s5 recipe.\\\n            The evaluation metric is phone error rate (PER).\\\n          \",\n            },\n            {\n                name: \"ASR\",\n                description:\n                    \"\\\n            Automatic Speech Recognition, ASR transcribes utterances into words.\\\n            While PR analyzes the improvement in modeling phonetics, ASR reflects the significance of the improvement in a real-world scenario.\\\n            LibriSpeech train-clean-100/devclean/test-clean subsets are used for training/validation/testing.\\\n            The evaluation metric is word error rate (WER).\\\n          \",\n            },\n        ],\n    },\n    {\n        name: \"detection\",\n        description: \"detection description\",\n        tasks: [\n            {\n                name: \"KS\",\n                description:\n                    \"\\\n            Keyword Spotting, KS detects preregistered keywords by classifying utterances into a predefined set of words.\\\n            The task is usually performed on-device for the fast response time.\\\n            Thus, accuracy, model size, and inference time are all crucial.\\\n            We choose the widely used Speech Commands dataset v1.0 for the task.\\\n            The dataset consists of ten classes of keywords, a class for silence, and an unknown class to include the false positive.\\\n            The evaluation metric is accuracy (ACC)\\\n          \",\n            },\n            {\n                name: \"QbE\",\n                description:\n                    \"\\\n            Query by Example Spoken Term Detection, QbE detects a spoken term (query) in an audio database (documents) by \\\n            binary discriminating a given pair of query and document into a match or not.\\\n            The English subset in QUESST 2014 challenge is adopted since we focus on investigating English as the first step.\\\n            The evaluation metric is maximum term weighted value (MTWV) which balances misses and false alarms.\\\n            In the SUPERB Challenge, the average between Mean Average Precision (MAP) and Equal Error Rate (ERR) is used as the metric on the hidden-set\\\n          \",\n            },\n        ],\n    },\n    {\n        name: \"semantics\",\n        description: \"semantics description\",\n        tasks: [\n            {\n                name: \"IC\",\n                description:\n                    \"\\\n            Intent Classification, IC classifies utterances into predefined classes to determine the intent of speakers.\\\n            We use the Fluent Speech Commands dataset, where each utterance is tagged with three intent labels: action, object, and location.\\\n            The evaluation metric is accuracy (ACC).\\\n          \",\n            },\n            {\n                name: \"SF\",\n                description:\n                    \"\\\n            Slot Filling, SF predicts a sequence of semantic slot-types from an utterance, \\\n            like a slot-type FromLocation for a spoken word Taipei, which is known as a slot-value.\\\n            Both slot-types and slot-values are essential for an SLU system to function.\\\n            The evaluation metrics thus include slot-type F1 score and slotvalue CER.\\\n            Audio SNIPS is adopted, which synthesized multi-speaker utterances for SNIPS.\\\n            Following the standard split in SNIPS, US-accent speakers are further selected for training, and others are for validation/testing.\\\n          \",\n            },\n            {\n                name: \"ST\",\n                description: `Speech Translation (ST) translates utterance into foreign words. To achieve this goal, the model has to perform ASR and MT simultaneously, which increases the difficulty. CoVoST2 En-De dataset is adopted while all the examples containing \"REMOVE\" are removed. The evaluation metric is case-sensitive detokenized BLEU. \\\n                In the SUPERB Challenge, since it is too difficult to train the ST model with limited translation pairs, we first train on CoVoST2 En-De dataset and then finetuned on the training set of the hidden-set.\n                `\n            }\n        ],\n    },\n    {\n        name: \"speaker\",\n        description: \"speaker description\",\n        tasks: [\n            {\n                name: \"SID\",\n                description:\n                    \"\\\n            Speaker Identification, SID classifies each utterance for its speaker identity as a multi-class classification, \\\n            where speakers are in the same predefined set for both training and testing.\\\n            The widely used VoxCeleb1 [26] is adopted, and the evaluation metric is accuracy (ACC).\\\n          \",\n            },\n            {\n                name: \"SV\",\n                description:\n                    \"\\\n            Automatic Speaker Verification, ASV verifies whether the speakers of a pair of utterances match as a binary classification, \\\n            and speakers in the testing set may not appear in the training set.\\\n            Thus, ASV is more challenging than SID. VoxCeleb1 is used without VoxCeleb2 training data and noise augmentation. \\\n            The evaluation metric is equal error rate (EER).\\\n          \",\n            },\n            {\n                name: \"SD\",\n                description:\n                    \"\\\n            Speaker Diarization, SD predicts who is speaking when for each timestamp, and multiple speakers can speak simultaneously.\\\n            The model has to encode rich speaker characteristics for each frame and should be able to represent mixtures of signals.\\\n            LibriMix is adopted where LibriSpeech train-clean-100/dev-clean/test-clean are used to generate mixtures for training/validation/testing.\\\n            We focus on the two-speaker scenario as the first step.\\\n            The time-coded speaker labels were generated using alignments from Kaldi LibriSpeech ASR model.\\\n            The evaluation metric is diarization error rate (DER).\\\n          \",\n            },\n        ],\n    },\n    {\n        name: \"paralinguistics\",\n        description: \"paralinguistics description\",\n        tasks: [\n            {\n                name: \"ER\",\n                description:\n                    \"\\\n            Emotion Recognition, ER predicts an emotion class for each utterance.\\\n            The most widely used ER dataset IEMOCAP is adopted, and we follow the conventional evaluation protocol:\\\n            we drop the unbalance emotion classes to leave the final four classes with a similar amount of data points and \\\n            cross-validates on five folds of the standard splits.\\\n            The evaluation metric is accuracy (ACC).\\\n          \",\n            },\n        ],\n    },\n    {\n        name: \"generation\",\n        description: \"generation description\",\n        tasks: [\n            {\n                name: \"SE\",\n                description: `Speech enhancement (SE) is the task of removing background noise from a degraded speech signal and improving the perceived quality and intelligibility of the signal. In SUPERB, we evaluate the speech enhancement problem on the VoiceBank-DEMAND corpus. A three layer BLSTM model is trained to predict the spectral mask for the clean signal. The prediction is transformed back to the time domain using inverse short-time Fourier transform (iSTFT). Our evaluation metrics cover various aspects of the speech enhancement quality. including Perceptual Evaluation of Speech Quality (PESQ) and ShortTime Objective Intelligibility (STOI)\n                `\n            },\n            {\n                name: \"SS\",\n                description: `Speech Separation (SS) is the task of separating target speech from background interference. It is an important step for speech processing, especially for noisy and multi-talker scenarios. In SUPERB, we investigate speech separation on the Libri2Mix dataset. We use the same 3-layer BLSTM model as the enhancement task, and permutation invariant training (PIT) is performed to optimize the objectives. The evaluation metric for speech separation is scale-invariant signal-to-distortion ratio improvement (SI-SDRi).\n                `\n            },\n        ],\n    }\n];\n\nconst tracks = [\n    {\n        name: \"constrained\",\n        rules: (\n            <span>\n                A fair comparison between{\" \"}\n                <Strong>frozen representations</Strong> by enforcing the same\n                downstream model in each task. Only a few hyper-paramters for\n                training are allowed to tuned.\n            </span>\n        ),\n        submit: \"Make sure to read the rules before submitting.\",\n        Icon: LockIcon,\n        theme: createMuiTheme(constrainedTheme),\n    },\n    {\n        name: \"less-constrained\",\n        rules: (\n            <span>\n                A comparison between <Strong>frozen representations</Strong>{\" \"}\n                with customized but limited-resource downstream models. The\n                details of downstream models are reported along with\n                submissions.\n            </span>\n        ),\n        submit: false,\n        Icon: LockOpenIcon,\n        theme: createMuiTheme(lessConstrainedTheme),\n    },\n    {\n        name: \"unconstrained\",\n        rules: (\n            <span>\n                The track does not limit any approach for solving SUPERB tasks\n                as long as it in principle utilizes only{\" \"}\n                <Strong>a single shared model</Strong> with limited\n                task-specific parameters.\n            </span>\n        ),\n        submit: false,\n        Icon: AllInclusive,\n        theme: createMuiTheme(unconstrainedTheme),\n    },\n];\n\n\nconst leaderboard_selections = [\n    {\n        name: \"all\",\n        theme: createMuiTheme(submitFormTheme),\n    },\n    {\n        name: \"constrained\",\n        theme: createMuiTheme(constrainedTheme),\n    },\n    {\n        name: \"less-constrained\",\n        theme: createMuiTheme(lessConstrainedTheme),\n    },\n    {\n        name: \"unconstrained\",\n        theme: createMuiTheme(unconstrainedTheme),\n    },\n];\n\nconst public_hidden_selections = [\n    {\n        name: \"public\",\n        theme: createMuiTheme(submitFormTheme),\n    },\n    {\n        name: \"hidden\",\n        theme: createMuiTheme(submitFormTheme),\n    },\n];\n\n\nconst public_task_columnInfo = {\n    PR_per_public: {\n        header: \"PR public\",\n        width: 110,\n        higherBetter: false,\n        isScore: true,\n        type: \"number\",\n    },\n    KS_acc_public: {\n        header: \"KS public\",\n        width: 110,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    IC_acc_public: {\n        header: \"IC public\",\n        width: 110,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    SID_acc_public: {\n        header: \"SID public\",\n        width: 110,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    ER_acc_public: {\n        header: \"ER public\",\n        width: 110,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    ERfold1_acc_public: {\n        header: \"ER fold1\",\n        width: 110,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    ERfold2_acc_public: {\n        header: \"ER fold2\",\n        width: 110,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    ERfold3_acc_public: {\n        header: \"ER fold3\",\n        width: 110,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    ERfold4_acc_public: {\n        header: \"ER fold4\",\n        width: 110,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    ERfold5_acc_public: {\n        header: \"ER fold5\",\n        width: 110,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    ASR_wer_public: {\n        header: \"ASR public\",\n        width: 120,\n        higherBetter: false,\n        isScore: true,\n        type: \"number\",\n    },\n    ASR_LM_wer_public: {\n        header: \"ASR-LM public\",\n        width: 140,\n        higherBetter: false,\n        isScore: true,\n        type: \"number\",\n    },\n    QbE_mtwv_public: {\n        header: \"QbE public\",\n        width: 120,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    SF_f1_public: {\n        header: \"SF-F1 public\",\n        width: 130,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    SF_cer_public: {\n        header: \"SF-CER public\",\n        width: 140,\n        higherBetter: false,\n        isScore: true,\n        type: \"number\",\n    },\n    SV_eer_public: {\n        header: \"SV public\",\n        width: 110,\n        higherBetter: false,\n        isScore: true,\n        type: \"number\",\n    },\n    SD_der_public: {\n        header: \"SD public\",\n        width: 110,\n        higherBetter: false,\n        isScore: true,\n        type: \"number\",\n    },\n    ST_bleu_public: {\n        header: \"ST public\",\n        width: 110,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    SE_pesq_public: {\n        header: \"SE-PESQ public\",\n        width: 140,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    SE_stoi_public: {\n        header: \"SE-STOI public\",\n        width: 140,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    SS_sisdri_public: {\n        header: \"SS public\",\n        width: 110,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n}\n\nconst hidden_task_columnInfo = {\n    PR_per_hidden_dev: {\n        header: \"PR hidden dev\",\n        width: 140,\n        higherBetter: false,\n        isScore: true,\n        type: \"number\",\n    },\n    SID_acc_hidden_dev: {\n        header: \"SID hidden dev\",\n        width: 140,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    ER_acc_hidden_dev: {\n        header: \"ER hidden dev\",\n        width: 140,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    ASR_wer_hidden_dev: {\n        header: \"ASR hidden dev\",\n        width: 140,\n        higherBetter: false,\n        isScore: true,\n        type: \"number\",\n    },\n    QbE_map_hidden_dev: {\n        header: \"QbE-MAP hidden dev\",\n        width: 180,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    QbE_eer_hidden_dev: {\n        header: \"QbE-EER hidden dev\",\n        width: 180,\n        higherBetter: false,\n        isScore: true,\n        type: \"number\",\n    },\n    SV_eer_hidden_dev: {\n        header: \"SV hidden dev\",\n        width: 140,\n        higherBetter: false,\n        isScore: true,\n        type: \"number\",\n    },\n    SD_der_hidden_dev: {\n        header: \"SD hidden dev\",\n        width: 140,\n        higherBetter: false,\n        isScore: true,\n        type: \"number\",\n    },\n    ST_bleu_hidden_dev: {\n        header: \"ST hidden dev\",\n        width: 140,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    SS_sisdri_hidden_dev: {\n        header: \"SS hidden dev\",\n        width: 140,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    SE_stoi_hidden_dev: {\n        header: \"SE-STOI hidden dev\",\n        width: 180,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n    SE_pesq_hidden_dev: {\n        header: \"SE-PESQ hidden dev\",\n        width: 180,\n        higherBetter: true,\n        isScore: true,\n        type: \"number\",\n    },\n}\n\nconst individual_submission_columnInfo = {\n    aoeTimeUpload: {\n        header: \"Upolad Time\",\n        width: 160,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    submitName: {\n        header: \"Method\",\n        width: 150,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    modelDesc: {\n        header: \"Description\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    modelURL: {\n        header: \"Model URL\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    download: {\n        header: \"Download\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    task: {\n        header: \"Track\",\n        width: 130,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    showOnLeaderboard: {\n        header: \"Show\",\n        width: 70,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    stride: {\n        header: \"Stride\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"number\",\n    },\n    inputFormat: {\n        header: \"Input Format\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    corpus: {\n        header: \"Corpus\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    paramDesc: {\n        header: \"Parameter Description\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    paramShared: {\n        header: \"Shared parameters\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"number\",\n    },\n    fineTunedParam: {\n        header: \"Fine-tuned parameters\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"number\",\n    },\n    taskSpecParam: {\n        header: \"Task-specific parameters\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"number\",\n    },\n    state: {\n        header: \"State\",\n        width: 70,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    stateInfo: {\n        header: \"State Info\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    submitUUID: {\n        header: \"Submission ID\",\n        width: 300,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    ...public_task_columnInfo,\n};\n\nconst individual_submission_hidden_columnInfo = {\n    aoeTimeUpload: {\n        header: \"Upolad Time\",\n        width: 160,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    submitName: {\n        header: \"Method\",\n        width: 150,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    modelDesc: {\n        header: \"Description\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    task: {\n        header: \"Track\",\n        width: 130,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    showOnLeaderboard: {\n        header: \"Show\",\n        width: 70,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    huggingfaceOrganizationName: {\n        header: \"Organization\",\n        width: 130,\n        higherBetter: undefined,\n        type: \"alphanumeric\"\n    },\n    huggingfaceRepoName: {\n        header: \"Repository\",\n        width: 130,\n        higherBetter: undefined,\n        type: \"alphanumeric\"\n    },\n    huggingfaceCommonHash: {\n        header: \"Commit\",\n        width: 130,\n        higherBetter: undefined,\n        type: \"alphanumeric\"\n    },\n    paramShared: {\n        header: \"Shared parameters\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"number\",\n    },\n    state: {\n        header: \"State\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    stateInfo: {\n        header: \"State Info\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    submitUUID: {\n        header: \"Submission ID\",\n        width: 300,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    ...hidden_task_columnInfo,\n};\n\n\nconst leaderboard_columnInfo = {\n    submitName: {\n        header: \"Method\",\n        width: 150,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    name: {\n        header: \"Name\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    modelDesc: {\n        header: \"Description\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    modelURL: {\n        header: \"URL\",\n        width: 60,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    aoeTimeUpload: {\n        header: \"Upolad Time\",\n        width: 160,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    task: {\n        header: \"Track\",\n        width: 130,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    stride: {\n        header: \"Stride\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"number\",\n    },\n    inputFormat: {\n        header: \"Input Format\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    corpus: {\n        header: \"Corpus\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    paramDesc: {\n        header: \"Parameter Description\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    paramShared: {\n        header: \"Shared parameters\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"number\",\n    },\n    fineTunedParam: {\n        header: \"Fine-tuned parameters\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"number\",\n    },\n    taskSpecParam: {\n        header: \"Task-specific parameters\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"number\",\n    },\n    ...public_task_columnInfo,\n};\n\nconst leaderboard_hidden_columnInfo = {\n    submitName: {\n        header: \"Method\",\n        width: 150,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    modelDesc: {\n        header: \"Description\",\n        width: 150,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    name: {\n        header: \"Name\",\n        width: 130,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    aoeTimeUpload: {\n        header: \"Upolad Time\",\n        width: 160,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    task: {\n        header: \"Track\",\n        width: 130,\n        higherBetter: undefined,\n        type: \"alphanumeric\",\n    },\n    paramShared: {\n        header: \"Shared parameters\",\n        width: 100,\n        higherBetter: undefined,\n        type: \"number\",\n    },\n    ...hidden_task_columnInfo,\n};\n\nconst reference_points = {\n    \"PR_per_public\": [17.989999999999995, 96.47],\n    \"KS_acc_public\": [41.3826674, 96.66],\n    \"IC_acc_public\": [9.649354219, 98.76],\n    \"SID_acc_public\": [20.058174, 9.03e+01],\n    \"ER_acc_public\": [48.23672168, 67.62],\n    \"ASR_wer_public\": [76.82, 96.38],\n    \"QbE_mtwv_public\": [0.0058, 0.0736].map(item => 100 * item),\n    \"SF_f1_public\": [69.64, 89.81],\n    \"SF_cer_public\": [47.06, 78.24],\n    \"SV_eer_public\": [90.44, 94.89],\n    \"SD_der_public\": [89.95, 94.38],\n    \"ST_bleu_public\": [2.32, 20.01],\n    \"SE_pesq_public\": [2.55, 2.64],\n    \"SE_stoi_public\": [93.6, 94.2],\n    \"SS_sisdri_public\": [9.2341, 10.4514],\n    \"PR_per_hidden_dev\": [0.8100076941, 0.1632352551].map(item => 100 * (1 - item)),\n    \"SID_acc_hidden_dev\": [0.4958333373, 0.7983333468].map(item => 100 * item),\n    \"ER_acc_hidden_dev\": [0.4712328911, 0.6794520617].map(item => 100 * item),\n    \"ASR_wer_hidden_dev\": [0.7356, 0.2149418249].map(item => 100 * (1 - item)),\n    \"SV_eer_hidden_dev\": [0.255671, 0.127294].map(item => 100 * (1 - item)),\n    \"SD_der_hidden_dev\": [0.157551825, 0.1048149392].map(item => 100 * (1 - item)),\n    \"QbE_map_hidden_dev\": [0.1860194802, 0.5108585358].map(item => 100 * item),\n    \"QbE_eer_hidden_dev\": [0.3694903255, 0.1780432165].map(item => 100 * (1 - item)),\n    \"ST_bleu_hidden_dev\": [3.2, 23.33],\n    \"SS_sisdri_hidden_dev\": [4.655592075, 8.082589958],\n    \"SE_pesq_hidden_dev\": [1.510035692, 1.567159144],\n    \"SE_stoi_hidden_dev\": [0.8433188677, 0.8520344653].map(item => 100 * item),\n}\n\nconst hidden_dev_set = [\n    \"PR_per_hidden_dev\", \"SID_acc_hidden_dev\", \"ER_acc_hidden_dev\", \"ASR_wer_hidden_dev\", \"QbE_map_hidden_dev\",\n    \"QbE_eer_hidden_dev\", \"SV_eer_hidden_dev\", \"SD_der_hidden_dev\", \"ST_bleu_hidden_dev\",\n    \"SE_pesq_hidden_dev\", \"SE_stoi_hidden_dev\", \"SS_sisdri_hidden_dev\",\n]\n\nconst hidden_test_set = [\n    \"PR_per_hidden_test\", \"SID_acc_hidden_test\", \"ER_acc_hidden_test\", \"ASR_wer_hidden_test\", \"QbE_map_hidden_test\",\n    \"QbE_eer_hidden_test\", \"SV_eer_hidden_test\", \"SD_der_hidden_test\", \"ST_bleu_hidden_test\",\n    \"SE_pesq_hidden_test\", \"SE_stoi_hidden_test\", \"SS_sisdri_hidden_test\",\n]\n\nexport {\n    reference_points,\n    subscribe_link,\n    domains,\n    tracks,\n    individual_submission_columnInfo,\n    individual_submission_hidden_columnInfo,\n    leaderboard_columnInfo,\n    leaderboard_hidden_columnInfo,\n    leaderboard_selections,\n    public_hidden_selections,\n    hidden_dev_set,\n    hidden_test_set,\n};\n","import React from \"react\";\nimport { useTheme } from \"@material-ui/styles\";\nimport { Box, Typography, Divider } from \"@material-ui/core\";\nimport update from \"immutability-helper\";\n\nfunction TitleTemplate(props) {\n  const theme = useTheme();\n  const {\n    title = \"Title\",\n    titleColor = \"textPrimary\",\n    titleVariant = \"h4\",\n    titleComponent = \"h4\",\n    description = null,\n    descriptionColor = \"textSecondary\",\n    descriptionVariant = \"body1\",\n    textMaxWidth = 750,\n    divider = true,\n    titleAlign = \"center\",\n    id = null\n  } = props;\n\n  return (\n    <div id={id}>\n      <Box margin={theme.spacing(3, \"auto\")}>\n        <Box margin={theme.spacing(2, titleAlign === \"center\"? \"auto\" : 0)} maxWidth={textMaxWidth} textAlign={titleAlign}>\n          <Typography component={titleComponent} color={titleColor} variant={titleVariant}>\n            {title}\n          </Typography>\n          {description && (\n            <Box margin={theme.spacing(1, \"auto\")}>\n              <Typography color={descriptionColor} variant={descriptionVariant}>\n                {description}\n              </Typography>\n            </Box>\n          )}\n        </Box>\n        {divider && <Divider />}\n      </Box>\n    </div>\n  );\n}\n\nfunction Title(props) {\n  return <TitleTemplate {...props} />;\n}\n\nfunction SubTitle(props) {\n  const newProps = update(props, {\n    titleVariant: { $set: \"h5\" },\n  });\n  return <TitleTemplate {...newProps} />;\n}\n\nexport { Title, SubTitle };\n","import React, { useRef, useEffect, useState } from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport { Typography, Link, Grid } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\n\nimport { Section, SubSection, SubSubSection } from \"./components/Sections\";\nimport { DescriptionButton } from \"./components/Buttons\";\nimport { Strong } from \"./components/Utilies\";\nimport { subscribe_link } from \"./Data\";\nimport YouTube from 'react-youtube';\nimport { Title } from \"./components/Titles\";\nimport { HashLink } from \"react-router-hash-link\";\n\nexport default function Landing(props) {\n    const theme = useTheme();\n    const ref = useRef(null);\n    const [width, setWidth] = useState(0);\n\n    useEffect(() => {\n        setWidth(ref.current.offsetWidth)\n    }, []);\n\n    const videoWidth = Math.min(width, 700)\n    const opts = {\n        height: videoWidth / 1920 * 1080,\n        width: videoWidth,\n        playerVars: {\n            // https://developers.google.com/youtube/player_parameters\n            autoplay: 0,\n        },\n    };\n\n    return (\n        <Box ref={ref} margin={theme.spacing(0, 0, 8)}>\n            <Box margin={theme.spacing(8, \"auto\", 1)}>\n                <Typography variant={useMediaQuery(theme.breakpoints.up(\"sm\")) ? \"h2\" : \"h4\"} color=\"textPrimary\">\n                    <strong>Dynamic-SUPERB</strong>\n                </Typography>\n            </Box>\n            <Box margin={theme.spacing(1, \"auto\", 6)}>\n                <Typography\n                    variant={\n                        useMediaQuery(theme.breakpoints.up(\"sm\")) ? \"h4\" : \"h5\"\n                    }\n                    color=\"textPrimary\"\n                >\n                    Towards A Dynamic, Collaborative, and Comprehensive Instruction-Tuning Benchmark for Speech\n                </Typography>\n            </Box>\n            <SubSection>\n                <Typography\n                    component={\"span\"}\n                    variant=\"body1\"\n                    color=\"textSecondary\"\n                >\n                            <a href=\"https://arxiv.org/abs/2309.09510\" target=\"_blank\" rel=\"noopener noreferrer\">Dynamic-SUPERB</a>\n                            {\" \"}is a dynamic and collaborative\n                            benchmark aimed at building universal speech\n                            models capable of leveraging instruction tuning\n                            to perform multiple tasks in a zero-shot fashion.\n                            It provides a platform for researchers and\n                            developers to evaluate and compare different\n                            models in various speech-processing tasks.\n                </Typography>\n                <img src={\"dynamic-superb.png\"} width=\"100%\" />\n            </SubSection>\n            <Box maxWidth={800} margin=\"auto\" textAlign=\"left\">\n                <SubSection>\n                    <Title title=\"News\" titleVariant=\"h4\"/>\n                    <Typography\n                        component={\"span\"}\n                        variant=\"body1\"\n                        color=\"textSecondary\"\n                    >\n                        <ul>\n                            <li><span><Strong>Mar 14, 2024</Strong>: We have announced the call for tasks. Please click <a href=\"/call-for-task\">here</a> for detailed information.</span></li>\n                            <li><span><Strong>Mar 13, 2024</Strong>: We have reduced the size of the data for all evaluation instances.</span></li>\n                        </ul>\n                    </Typography>\n                </SubSection>\n                <SubSection>\n                    <Title title=\"About the Benchmark\" titleVariant=\"h5\" titleAlign=\"left\"/>\n                    <Typography\n                        component={\"span\"}\n                        variant=\"body1\"\n                        color=\"textSecondary\"\n                    >\n                        <div>\n                            To kickstart the benchmark, we have included 55 evaluation\n                            instances by combining 33 tasks and 22 datasets. These cover\n                            a range of dimensions, including content, speaker, semantics,\n                            degradation, and paralinguistics. We also included audio-processing\n                            tasks to evaluate the performance of speech models beyond\n                            speech-processing. Each task consists of one or more datasets\n                            (evaluation instances) with labeled examples and corresponding\n                            instructions.\n                        </div>\n                        <br/>\n                        <div>\n                            A comprehensive list of all tasks along with their detailed descriptions\n                            can be found <a href=\"https://github.com/dynamic-superb/dynamic-superb/blob/main/docs/task_list.md\"\n                            target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n                            This list provides an overview of the tasks currently\n                            included in the benchmark, but we are actively seeking contributions\n                            from the community to expand the range of tasks and make the benchmark\n                            more diverse and comprehensive. You can view the performance of each\n                            model on the <a href=\"https://github.com/dynamic-superb/dynamic-superb/blob/main/docs/leaderboard.md\"\n                            target=\"_blank\" rel=\"noopener noreferrer\">leaderboard</a>.\n                        </div>\n                    </Typography>\n                </SubSection>\n                <SubSection>\n                    <Title title=\"Call for Contributions\" titleVariant=\"h5\" titleAlign=\"left\"/>\n                    <Typography\n                        component={\"span\"}\n                        variant=\"body1\"\n                        color=\"textSecondary\"\n                    >\n                        <div>\n                            We invite and encourage everyone to contribute to Dynamic-SUPERB by\n                            submitting new tasks. This is an excellent opportunity to showcase your\n                            creativity and explore the potential of large spoken language models in\n                            solving various speech-related problems.\n                        </div>\n                        <br/>\n                        <div>\n                            For contributing new tasks, please refer to\n                            the <HashLink smooth to=\"/submission#task-submission\">task submission tutorial</HashLink>.\n                            To submit scores for your model, please refer to\n                            the <HashLink smooth to=\"/submission#score-submission\">score submission tutorial</HashLink>.\n                            We welcome tasks from different domains and applications, as\n                            long as they are relevant to speech processing.\n                        </div>\n                        <br/>\n                        <div>\n                            All submitted tasks will undergo\n                            a <HashLink smooth to=\"/review-process\">review process</HashLink> conducted by our team.\n                            We will evaluate the quality, feasibility, and relevance of each task\n                            proposal. Upon approval, the tasks will be merged into the Dynamic-SUPERB\n                            repository, making them available for evaluation and comparison by the\n                            community.\n                        </div>\n                    </Typography>\n                </SubSection>\n                <SubSection>\n                    <Title title=\"Paper and Documentation\" titleVariant=\"h5\" titleAlign=\"left\"/>\n                    <Typography\n                        component={\"span\"}\n                        variant=\"body1\"\n                        color=\"textSecondary\"\n                    >\n                        <div>\n                            A paper introducing Dynamic-SUPERB is now available\n                            on <a href=\"https://arxiv.org/abs/2309.09510\" target=\"_blank\" rel=\"noopener noreferrer\">arXiv</a>.This paper\n                            presents an overview of the benchmark, detailing its motivation, tasks,\n                            and evaluation framework. It also showcases experimental results and\n                            insights gained from evaluating various models on the benchmark tasks.\n                            Due to space constraints, ablation studies are not included in the paper;\n                            however, we present them <a href=\"https://github.com/dynamic-superb/dynamic-superb/blob/main/docs/ablation_studies.md\"\n                            target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n                        </div>\n                        <br/>\n                        <div>\n                            We also provide two introductory documents\n                            here: <a href=\"https://github.com/dynamic-superb/dynamic-superb/blob/main/docs/Dynamic-SUPERB-Introduction.pdf\"\n                            target=\"_blank\" rel=\"noopener noreferrer\">Dynamic-SUPERB Introduction</a> and <a\n                            href=\"https://github.com/dynamic-superb/dynamic-superb/blob/main/docs/Dynamic-SUPERB-Tutorial.pdf\"\n                            target=\"_blank\" rel=\"noopener noreferrer\">Dynamic-SUPERB Tutorial</a>. These documents offer a\n                            high-level introduction to the benchmark and include information on\n                            dataset formats, evaluation protocols, and implementation details.\n                        </div>\n                    </Typography>\n                </SubSection>\n                <SubSection>\n                    <Title title=\"Contact Us\" titleVariant=\"h5\" titleAlign=\"left\"/>\n                    <Typography\n                        component={\"span\"}\n                        variant=\"body1\"\n                        color=\"textSecondary\"\n                    >\n                        <div>\n                            If you have any questions or need further assistance, please don't\n                            hesitate to contact us at <a href=\"mailto:dynamic.superb.official@gmail.com\">\n                            dynamic.superb.official@gmail.com</a>. We are\n                            here to support and guide you through the process of task submission,\n                            review, and evaluation. Your feedback and suggestions are valuable to\n                            us as we strive to make Dynamic-SUPERB a comprehensive and useful\n                            benchmark for the community.\n                        </div>\n                        <br/>\n                        <div>\n                            Join us in exploring the capabilities of large spoken language models\n                            and shaping the future of speech-related research and applications!\n                        </div>\n                    </Typography>\n                </SubSection>\n                <SubSection>\n                    <Grid container justify=\"space-evenly\" spacing={0}>\n                        {[\n                            [\"ntu-1000.png\", \"https://www.ntu.edu.tw/english/\"],\n                            [\"cmu-1000.png\", \"https://www.cmu.edu/\"],\n                            [\"huggingface-1000.png\", \"https://huggingface.co/\"]\n                        ].map((filename) => {\n                            return (\n                                <Grid item xs={6} sm={4} md={4} key={filename[0]}>\n                                    <a target=\"_blank\" href={filename[1]}>\n                                        <img src={filename[0]} width=\"100%\" />\n                                    </a>\n                                </Grid>\n                            );\n                        })}\n                    </Grid>\n                </SubSection>\n                <Box margin={theme.spacing(8, 0)} textAlign=\"center\">\n                    <Title title=\"\"/>\n                    <Typography variant=\"body1\" color=\"textSecondary\">\n                        This website is modified from the source code of <DescriptionButton name={<a>the SUPERB official website</a>} link=\"https://github.com/superbbenchmark/superbbenchmark.github.io\" target=\"_blank\" rel=\"noopener noreferrer\"/>.\n                    </Typography>\n                </Box>\n            </Box>\n        </Box>\n    );\n}\n","import React from \"react\";\nimport { makeStyles, ThemeProvider, useTheme } from \"@material-ui/core/styles\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport { HashLink } from 'react-router-hash-link';\nimport 'katex/dist/katex.min.css'\n\nimport { Section } from \"./components/Sections\";\nimport { Title } from \"./components/Titles\";\nimport { Strong } from \"./components/Utilies\";\nimport { subscribe_link } from \"./Data\";\n\n\nconst news = [\n    // {\n    //     title: \"This is a markdown block\",\n    //     date: new Date(2021, 8, 2),\n    //     content: (\n    //         markdown\n    //     ),\n    // },\n    // {\n    //     title: \"This is for leaderboard test\",\n    //     date: new Date(2021, 9, 20),\n    //     content: (\n    //         <span>\n    //             <HashLink to=\"/leaderboard#paper\">paper</HashLink><br />\n    //             <HashLink to=\"/leaderboard#public-set\">Public Set</HashLink><br />\n    //             <HashLink to=\"/leaderboard#hidden-dev-set\">Hidden Dev Set</HashLink><br />\n    //         </span >\n    //     ),\n    // },\n    {\n        title: \"2021 SUPERB Challenge Timeline\",\n        date: new Date(2021, 8, 18),//y,m(0~11),d,h,m,s,ms\n        content: (\n            <span align=\"left\">\n                <HashLink to=\"/challenge-aaai2022#top\">Challenge Policy</HashLink>\n                <ul>\n                    <li><span><Strong>Sep 18, 2021</Strong>: <HashLink to=\"/news#announcement2021\">Challenge announcement</HashLink> &amp; </span><a\n                        href=\"https://github.com/s3prl/s3prl\" target=\"_blank\" rel=\"noopener\"><span>S3PRL</span></a><span> released</span></li>\n                    <li><span><Strong>Sep 30, 2021</Strong>: Overall metrics announcement &amp; </span>\n                        <a href=\"https://superbbenchmark.org/leaderboard\"\n                            target=\"_blank\" rel=\"noopener\"><span>public-set leaderboard</span>\n                        </a>\n                        <span> is online and accepts submissions</span></li>\n                    <li><span><Strong>Oct 15, 2021</Strong>: Hidden-set leaderboard is online and accepts submissions</span></li>\n                    <li><span><Strong>Nov 12, 2021</Strong>: </span><a href=\"https://aaai-sas-2022.github.io/\" target=\"_blank\"\n                        rel=\"noopener\"><span>AAAI workshop</span></a><span> paper submission deadline (encouraged)</span></li>\n                    <li><span><Strong>Dec 3, 2021</Strong>: </span><a href=\"https://aaai-sas-2022.github.io/\" target=\"_blank\"\n                        rel=\"noopener\"><span>AAAI workshop</span></a><span> paper acceptance / rejection announcement</span>\n                    </li>\n                    <li><span><Strong>Jan 10, 2022</Strong>: Hidden-set leaderboard submission deadline</span></li>\n                    <li><span><Strong>Jan 13, 2022</Strong>: Submission selection &amp; system description paper deadline</span></li>\n                    <li><span><Strong>Jan 20, 2022</Strong>: Winner announcement &amp; reveal hidden-set private scores</span></li>\n                    <li><span><Strong>Jan 22, 2022</Strong>: AAAI late </span><a href=\"https://aaai.org/Conferences/AAAI-21/registration/\"\n                        target=\"_blank\" rel=\"noopener\"><span>registration</span></a><span> deadline</span></li>\n                    <li><span>Feb 28 - Mar 1, 2022: </span><a href=\"https://aaai-sas-2022.github.io/\" target=\"_blank\"\n                        rel=\"noopener\"><span>AAAI workshop</span></a><span> presentation</span></li>\n                </ul>\n            </span>),\n    },\n    {\n        title: \"Announcing 2021 SUPERB Challenge\",\n        id: \"announcement2021\",\n        date: new Date(2021, 8, 18),\n        content: (\n            <span align=\"left\">\n                <div>\n                    We are pleased to announce that the <Strong>2021 SUPERB Challenge</Strong> will be kicked off in <Strong>Oct 2021</Strong> and the results will be presented in <Strong>February 2022</Strong> in a reserved session at <a href=\"https://aaai-sas-2022.github.io\" target=\"_blank\" rel=\"noopener\">The 2nd Self-supervised Learning for Audio and Speech Processing workshop at AAAI</a> in Vancouver.The challenge policy can be found at <HashLink to=\"/challenge-aaai2022#top\">here</HashLink>.Submission system will be open in early <Strong>Oct 2021</Strong>.\n                </div>\n                <br />\n                <div>\n                    We encourage participants to submit (non-archival, cross-submission is possible after consulting organizers) workshop papers to share their results with the community and inspire future collaborations.\n                    In light of the tight AAAI deadlines, we encourage participants to submit papers based on results from the development dataset of the challenge, which is publicly available and can be evaluated directly by the\n                    participants. Workshop papers will be reviewed and acceptance will be determined based on the quality of the work. Participants can obtain results on hidden (surprise) dataset through the challenge’s model submission system that will be open from <Strong>Oct 2021</Strong> all the way to <Strong>Jan 2022</Strong>. Authors of the accepted papers should update hidden set results in their paper, and send the final paper to the organizers for verification by <Strong>Jan 13, 2022</Strong>. Performance on the hidden set will not be judged during the verification process.\n                </div>\n            </span >\n        ),\n    },\n]\n\nconst useStyles = makeStyles((theme) => ({\n    taskName: {\n        fontWeight: \"bold\",\n        marginBottom: theme.spacing(2),\n    },\n}));\n\nfunction Post(props) {\n    return (\n        <ThemeProvider>\n            <Box maxWidth={1000} margin=\"auto\">\n                <Section id={props.id}>\n                    <Title\n                        title={props.title\n                        }\n                        titleVariant=\"h5\"\n                        divider={true}\n                        color=\"textPrimary\"\n                    />\n                    <Typography\n                        variant=\"body1\"\n                        color=\"textSecondary\"\n                        align=\"right\"\n                        style={{ fontSize: 10 }}\n                    >\n                        <Box fontStyle=\"italic\">published on {props.date.toDateString()}\n                        </Box>\n                    </Typography>\n                    <Typography\n                        variant=\"body1\"\n                        color=\"textSecondary\"\n                    >\n                        {props.content}\n                    </Typography>\n\n                </Section>\n            </Box>\n        </ThemeProvider >\n    )\n}\n\nfunction News(props) {\n    const classes = useStyles();\n    const theme = useTheme();\n\n    return (\n        <React.Fragment>\n            <Section margin={theme.spacing(8, \"auto\", 1)}>\n                <Title\n                    title=\"News\"\n                    description={\n                        <span><Strong><a href={subscribe_link} target=\"_blank\" rel=\"noopener noreferrer\">Subscribe</a></Strong> our e-news to receive all the latest information about SUPERB.</span>\n                    }\n                />\n            </Section>\n            {news.map(Post)}\n\n        </React.Fragment >\n    );\n}\n\nexport default News;","import React from \"react\";\nimport { Paper } from \"@material-ui/core\";\n\nfunction LiftedPaper(props) {\n  const { elevation = 3, liftDegree = 6, ...remainedProps } = props;\n  const [hover, setHover] = React.useState(false);\n\n  return (\n    <Paper\n      {...remainedProps}\n      elevation={hover ? elevation + liftDegree : elevation}\n      onMouseOver={() => {\n        setHover((prev) => !prev);\n      }}\n      onMouseOut={() => {\n        setHover((prev) => !prev);\n      }}\n    />\n  );\n}\n\nexport { LiftedPaper };\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport { Box, Typography, Grid, Button, Chip, List, ListItem, Divider, Menu } from \"@material-ui/core\";\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { Section, SubSection } from \"./components/Sections\";\nimport { Title } from \"./components/Titles\";\nimport AdaptiveLink from \"./components/AdaptiveLink\";\nimport { LiftedPaper } from \"./components/LiftedOnHover\";\nimport { capitalizeFirstLetter, Strong } from \"./components/Utilies\";\nimport { DescriptionButton } from \"./components/Buttons\";\nimport baseline from \"./data/baseline.json\";\n\nconst statuses = [\"Proposal\",\"WIP\",\"Pending\",\"Accepted\",\"Benchmark\"]\n\nconst domains = [\"content\",\"speaker\",\"semantics\",\"degradation\",\"paralinguistics\"]\n\nconst taskList = [\n  {\n    name: \"Phoneme Segment Counting Task\",\n    description: \"\",\n    domain: \"paralinguistics\",\n    status: \"WIP\",\n    author: \"123456789ab\"\n  },\n  {\n    name: \"Emotional Speech Audio Classification_RAVDESS-EmotionalSound\",\n    description: \"\",\n    domain: \"paralinguistics\",\n    status: \"Pending\",\n    author: \"kasohg39\"\n  },\n  {\n    name: \"Human vocal sound recognition\",\n    description: \"The objective is to separate individual sound sources from a complex audio signal. This task is essential in scenarios where audio recordings contain overlapping sounds from multiple sources, such as different speakers, music, and environmental noises. But in this task, our goal is only to isolate each speaker source into its own track.\",\n    domain: \"Audio\",\n    status: \"Proposal\",\n    author: \"sdgo8h3h\"\n  },\n]\n\nfunction Tasks(props) {\n  const theme = useTheme();\n\n  return (\n    <React.Fragment>\n      <Section margin={theme.spacing(8, \"auto\", 1)}>\n        <Title\n          title=\"Tasks\"\n          description={\n            <span>\n              Lorem Ipsum\n            </span>\n          }\n        />\n      </Section>\n      <Box sx={{ overflow: \"auto\" }}>\n        <TableContainer component={LiftedPaper} sx={{ width: \"100%\", display: \"table\", tableLayout: \"fixed\" }}>\n          <Table stickyHeader>\n            <TableHead>\n              <TableRow>\n                <TableCell>Instance</TableCell>\n                <TableCell align=\"right\" style={{ minWidth: \"300\" }}>BERT-GSLM</TableCell>\n                <TableCell align=\"right\" style={{ minWidth: \"300\" }}>Whisper</TableCell>\n                <TableCell align=\"right\" style={{ minWidth: \"300\" }}>ImageBind-LLM</TableCell>\n                <TableCell align=\"right\" style={{ minWidth: \"300\" }}>Whisper-LLM</TableCell>\n                <TableCell align=\"right\" style={{ minWidth: \"300\" }}>ASR-ChatGPT</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {baseline.seen.map((instance) => (\n                <TableRow key={instance.Instance}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {instance.Instance}\n                  </TableCell>\n                  <TableCell align=\"right\"></TableCell>\n                  <TableCell align=\"right\"></TableCell>\n                  <TableCell align=\"right\"></TableCell>\n                  <TableCell align=\"right\"></TableCell>\n                  <TableCell align=\"right\"></TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Box>\n      <Box margin={theme.spacing(1, \"auto\", 6)}>\n        <Typography component={\"span\"} variant=\"body1\" color=\"textSecondary\">\n          Want to submit new tasks? Check out<DescriptionButton name={<a>CALL FOR TASK</a>}link=\"/contribute\"/>\n        </Typography>\n      </Box>\n    </React.Fragment>\n  );\n}\n\nexport default Tasks;\n","import { createContext } from \"react\";\n\nexport const AuthContext = createContext({\n    isLoggedIn: false,\n    userId: null,\n    token: null,\n    isAdmin: false,\n    email: null,\n    login: () => {},\n    logout: () => {},\n});\n","import { Controller } from \"react-hook-form\";\nimport { TextField, Popper } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        border: \"1px solid\",\n        padding: theme.spacing(0.7),\n        backgroundColor: theme.palette.background.paper,\n        fontSize: \"medium\",\n    },\n}));\nconst FormTextField = ({\n    control,\n    className,\n    name,\n    label,\n    description,\n    rules,\n    error,\n    helperText,\n}) => {\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const classes = useStyles();\n    return (\n        <>\n            <Controller\n                control={control}\n                name={name}\n                render={({ field }) => (\n                    <TextField\n                        {...field}\n                        className={className}\n                        label={label}\n                        onFocus={(e) => setAnchorEl(e.currentTarget)}\n                        onBlur={(e) => setAnchorEl(null)}\n                        fullWidth\n                        error={error}\n                        helperText={helperText}\n                    />\n                )}\n                rules={rules}\n            />\n            <Popper\n                open={Boolean(anchorEl)}\n                anchorEl={anchorEl}\n                placement=\"right-start\"\n                transition\n                style={{ maxWidth: \"27%\" }}\n            >\n                <div className={classes.paper}>{description}</div>\n            </Popper>\n        </>\n    );\n};\nexport default FormTextField;\n","import React, { useRef, useContext, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useForm, Controller } from \"react-hook-form\";\n\nimport swal from \"sweetalert\";\nimport axios from \"axios\";\n\nimport { Typography, Button } from \"@material-ui/core\";\nimport { makeStyles, ThemeProvider } from \"@material-ui/core/styles\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\n\nimport { AuthContext } from \"../context/auth-context\";\nimport { formVal } from \"../utils/form-validator\";\nimport { tracks } from \"../Data\";\nimport FormTextField from \"./FormTextfield\";\nimport { SubSubSection } from \"./Sections\";\nimport { capitalizeFirstLetter } from \"./Utilies\";\nimport { HashLink } from \"react-router-hash-link\";\nimport { Section } from \"./Sections\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: \"60%\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n    },\n    textField: {\n        marginBottom: theme.spacing(1),\n        width: \"80%\",\n    },\n    Button: {\n        display: \"block\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        marginTop: theme.spacing(2),\n        marginBottom: \"3%\",\n    },\n}));\n\nexport default function PublicForm(){\n    const classes = useStyles();\n    const filePickerRef = useRef();\n    const history = useHistory();\n    const [isLoading, setIsLoading] = useState(false);\n\n    const {\n        control,\n        handleSubmit,\n        register,\n        formState: { errors },\n        setValue,\n        watch,\n    } = useForm({\n        defaultValues: {\n            submitName: \"\",\n            modelURL: \"\",\n            modelDesc: \"\",\n            stride: \"\",\n            inputFormat: \"\",\n            corpus: \"\",\n            paramDesc: \"\",\n            paramShared: \"\",\n            fineTunedParam: \"\",\n            taskSpecParam: \"\",\n            task: \"1\",\n        },\n    });\n\n    const { ref, ...rest } = register(\"file\", formVal.file);\n\n    const auth = useContext(AuthContext);\n    const watchFile = watch(\"file\");\n\n    const submitHandler = async (data) => {\n        try {\n            setIsLoading(true);\n            const formData = new FormData();\n            formData.append(\"submitName\", data.submitName);\n            formData.append(\"modelURL\", data.modelURL);\n            formData.append(\"modelDesc\", data.modelDesc);\n            formData.append(\"stride\", data.stride);\n            formData.append(\"inputFormat\", data.inputFormat);\n            formData.append(\"corpus\", data.corpus);\n            formData.append(\"paramDesc\", data.paramDesc);\n            formData.append(\"paramShared\", data.paramShared);\n            formData.append(\"fineTunedParam\", data.fineTunedParam);\n            formData.append(\"taskSpecParam\", data.taskSpecParam);\n            formData.append(\"task\", data.task);\n            formData.append(\"file\", data?.file[0]);\n            const res = await axios({\n                method: \"post\",\n                url: \"/api/submission\",\n                data: formData,\n                headers: {\n                    Authorization: \"Bearer \" + auth.token,\n                },\n            })\n                .then((res) => {\n                    setIsLoading(false);\n                    swal({\n                        title: \"Susscess\",\n                        text: res.data.message,\n                        icon: \"success\",\n                    }).then(() => history.push(\"/profile\"));\n                })\n                .catch((err) => {\n                    setIsLoading(false);\n                    swal({\n                        title: \"Error\",\n                        text: err.response.data.message,\n                        icon: \"error\",\n                    });\n                });\n        } catch (err) { }\n    };\n\n    function PublicPart() {\n        return (\n            <Section>\n                <SubSubSection>\n                    <Typography variant=\"body1\" color=\"textSecondary\">\n                        Make sure to read the <HashLink to=\"/rules\">Rules</HashLink> before submitting to the <HashLink to=\"/leaderboard?track=constrained&subset=Paper\">SUPERB Benchmark</HashLink> or the <HashLink to=\"/leaderboard?track=constrained&subset=Public+Set\">SUPERB Challenge Public-set</HashLink>.\n                    </Typography>\n                </SubSubSection>\n                <form\n                    className={classes.root}\n                    autoComplete=\"off\"\n                    onSubmit={handleSubmit(submitHandler)}\n                >\n                    <FormTextField\n                        control={control}\n                        className={classes.textField}\n                        name=\"submitName\"\n                        label=\"Submission Name*\"\n                        description=\"A short name for your system, which will be displayed on\n                        the leaderboard. (Required)\"\n                        rules={formVal.submitName}\n                        error={errors.submitName}\n                        helperText={\n                            errors.submitName && errors.submitName.message\n                        }\n                    />\n                    <FormTextField\n                        control={control}\n                        className={classes.textField}\n                        name=\"modelURL\"\n                        label=\"Model URL/Github\"\n                        description=\"A Github URL for your model code repository. (Optional)\"\n                        rules={formVal.modelURL}\n                        error={errors.modelURL}\n                        helperText={errors.modelURL && errors.modelURL.message}\n                    />\n                    <FormTextField\n                        control={control}\n                        className={classes.textField}\n                        name=\"modelDesc\"\n                        label=\"Model Description*\"\n                        description=\"A sentence or two describing your system. Make sure to mention any outside data you use. (Required)\"\n                        rules={formVal.modelDesc}\n                        error={errors.modelDesc}\n                        helperText={\n                            errors.modelDesc && errors.modelDesc.message\n                        }\n                    />\n                    <FormTextField\n                        control={control}\n                        className={classes.textField}\n                        name=\"stride\"\n                        label=\"Stride*\"\n                        description=\"Your stride width (ms). (Required)\"\n                        rules={formVal.stride}\n                        error={errors.stride}\n                        helperText={errors.stride && errors.stride.message}\n                    />\n                    <FormTextField\n                        control={control}\n                        className={classes.textField}\n                        name=\"inputFormat\"\n                        label=\"Input Format*\"\n                        description=\"The type of input format you use. e.g., waveform, FBANK. (Required) \"\n                        rules={formVal.inputFormat}\n                        error={errors.inputFormat}\n                        helperText={\n                            errors.inputFormat && errors.inputFormat.message\n                        }\n                    />\n\n                    <FormTextField\n                        control={control}\n                        className={classes.textField}\n                        name=\"corpus\"\n                        label=\"Corpus*\"\n                        description=\"The type of corpus you use. e.g., LS 50 hr, LL 60k hr. (Required)\"\n                        rules={formVal.corpus}\n                        error={errors.corpus}\n                        helperText={errors.corpus && errors.corpus.message}\n                    />\n\n                    <FormTextField\n                        control={control}\n                        className={classes.textField}\n                        name=\"paramDesc\"\n                        label=\"Parameter Description*\"\n                        description=\"A sentence or explaining how you share parameters accross tasks (or stating that you don't share parameters). (Required)\"\n                        rules={formVal.paramDesc}\n                        error={errors.paramDesc}\n                        helperText={\n                            errors.paramDesc && errors.paramDesc.message\n                        }\n                    />\n\n                    <FormTextField\n                        control={control}\n                        className={classes.textField}\n                        name=\"paramShared\"\n                        label=\"Parameter shared without fine-tuning*\"\n                        description=\"The total number of parameters in your model which don't require task spesific fine-tuning (only numeric numbers allowed). (Required)\"\n                        rules={formVal.paramShared}\n                        error={errors.paramShared}\n                        helperText={\n                            errors.paramShared && errors.paramShared.message\n                        }\n                    />\n                    <FormTextField\n                        control={control}\n                        className={classes.textField}\n                        name=\"fineTunedParam\"\n                        label=\"Fine-tuned parameters\"\n                        description=\"The number of parameters in your model which are common but require task specific fine-tuning (only numeric numbers allowed). (Optional)\"\n                        rules={formVal.fineTunedParam}\n                        error={errors.fineTunedParam}\n                        helperText={\n                            errors.fineTunedParam &&\n                            errors.fineTunedParam.message\n                        }\n                    />\n                    <FormTextField\n                        control={control}\n                        className={classes.textField}\n                        name=\"taskSpecParam\"\n                        label=\"Task-Specific parameters\"\n                        description=\"The number of parameters in your model which are task specific and not used by any other tasks (only numeric numbers allowed). (Optional)\"\n                        rules={formVal.taskSpecParam}\n                        error={errors.taskSpecParam}\n                        helperText={\n                            errors.taskSpecParam && errors.taskSpecParam.message\n                        }\n                    />\n\n                    <FormControl\n                        component=\"fieldset\"\n                        style={{ marginTop: \"2%\" }}\n                    >\n                        <FormLabel component=\"legend\"><HashLink to=\"/rules\">Track</HashLink></FormLabel>\n                        <Controller\n                            control={control}\n                            name=\"task\"\n                            render={({ field }) => (\n                                <RadioGroup\n                                    row\n                                    aria-label=\"position\"\n                                    {...field}\n                                >\n                                    {tracks.map((track, index) => {\n                                        return (\n                                            <ThemeProvider theme={track.theme}>\n                                                <FormControlLabel\n                                                    value={(\n                                                        index + 1\n                                                    ).toString()}\n                                                    control={\n                                                        <Radio color=\"primary\" />\n                                                    }\n                                                    label={\n                                                        <Typography color=\"primary\">\n                                                            {capitalizeFirstLetter(\n                                                                track.name.toLowerCase()\n                                                            )}\n                                                        </Typography>\n                                                    }\n                                                    color=\"primary\"\n                                                />\n                                            </ThemeProvider>\n                                        );\n                                    })}\n                                </RadioGroup>\n                            )}\n                        />\n                    </FormControl>\n                    <input\n                        type=\"file\"\n                        accept=\".zip\"\n                        style={{ display: \"none\" }}\n                        name=\"file\"\n                        ref={(e) => {\n                            ref(e);\n                            filePickerRef.current = e;\n                        }}\n                        onChange={(e) => setValue(\"file\", e.target.files)}\n                    />\n                    <Button\n                        className={classes.Button}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => filePickerRef.current.click()}\n                    >\n                        {watchFile && watchFile[0]?.name\n                            ? watchFile[0]?.name\n                            : \"Select zip\"}\n                    </Button>\n                    <span style={{ color: \"red\" }}>\n                        {errors.file && errors.file.message}\n                    </span>\n                    <Button\n                        className={classes.Button}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={isLoading}\n                    >\n                        {isLoading ? \"Submitting...\" : \"Submit\"}\n                    </Button>\n                </form>\n            </Section>\n        )\n    }\n\n    return <PublicPart />;\n} ","import React, { useContext, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useForm, Controller } from \"react-hook-form\";\n\nimport swal from \"sweetalert\";\nimport axios from \"axios\";\n\nimport { Typography, Button } from \"@material-ui/core\";\nimport { makeStyles, ThemeProvider } from \"@material-ui/core/styles\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\n\nimport { AuthContext } from \"../context/auth-context\";\nimport { formVal } from \"../utils/form-validator\";\nimport { tracks } from \"../Data\";\nimport FormTextField from \"./FormTextfield\";\nimport { Section, SubSubSection } from \"./Sections\";\nimport { capitalizeFirstLetter } from \"./Utilies\";\nimport { HashLink } from \"react-router-hash-link\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: \"60%\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n    },\n    textField: {\n        marginBottom: theme.spacing(1),\n        width: \"80%\",\n    },\n    Button: {\n        display: \"block\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        marginTop: theme.spacing(2),\n        marginBottom: \"3%\",\n    },\n}));\n\nexport default function HiddenForm(){\n    const classes = useStyles();\n    const history = useHistory();\n    const [isLoading, setIsLoading] = useState(false);\n\n    const {\n        control,\n        handleSubmit,\n        formState: { errors },\n    } = useForm({\n        defaultValues: {\n            submitName: \"\",\n            huggingfaceOrganizationName: \"\",\n            huggingfaceRepoName: \"\",\n            huggingfaceCommonHash: \"\",\n            paramShared: \"\",\n            task: \"1\",\n        },\n    });\n\n    const auth = useContext(AuthContext);\n    const submitHandler = async (data) => {\n        try {\n            setIsLoading(true);\n            const formData = new FormData();\n            formData.append(\"submitName\", data.submitName);\n            formData.append(\"modelDesc\", data.modelDesc);\n            formData.append(\"huggingfaceOrganizationName\", data.huggingfaceOrganizationName);\n            formData.append(\"huggingfaceRepoName\", data.huggingfaceRepoName);\n            formData.append(\"huggingfaceCommonHash\", data.huggingfaceCommonHash);\n            formData.append(\"paramShared\", data.paramShared);\n            formData.append(\"task\", data.task);\n\n            const res = await axios({\n                method: \"post\",\n                url: \"/api/hiddensubmission\",\n                data: formData,\n                headers: {\n                    Authorization: \"Bearer \" + auth.token,\n                },\n            })\n                .then((res) => {\n                    setIsLoading(false);\n                    swal({\n                        title: \"Susscess\",\n                        text: res.data.message,\n                        icon: \"success\",\n                    }).then(() => history.push(\"/profile\"));\n                })\n                .catch((err) => {\n                    setIsLoading(false);\n                    swal({\n                        title: \"Preparing...\",\n                        text: err.response.data.message,\n                        icon: \"error\",\n                    });\n                });\n        } catch (err) { }\n    };\n\n    function HiddenPart() {\n        return (\n            <Section>\n                <SubSubSection>\n                    <Typography variant=\"body1\" color=\"textSecondary\">\n                        <p>Please <a target=\"_blank\" href=\"https://huggingface.co/superb/superb-submission\">Upload your model</a> before the submitting to the <HashLink to=\"/leaderboard?track=constrained&subset=Hidden+Dev+Set\">SUPERB Challenge Hidden-set</HashLink>.</p>\n                        <p>If you wish to submit pre-trained models in non-PyTorch frameworks, please <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSe52jYL2Yk9oYqXfg_Bg0Sjp01a6HSLUhY5VohsZOE5sNmgsw/viewform\">fill this form</a>.</p>\n                        <p>If you are not feasible to submit the pre-trained model, please <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSdA44nArlIDfGV63WwtwXer4WAPQO1aBwEpAjDSNjbMQN-GJQ/viewform\">fill this form</a> for us to see how to help!</p>\n                    </Typography>\n                </SubSubSection>\n                <form\n                    className={classes.root}\n                    autoComplete=\"off\"\n                    onSubmit={handleSubmit(submitHandler)}\n                >\n                    <FormTextField\n                        control={control}\n                        className={classes.textField}\n                        name=\"submitName\"\n                        label=\"Submission Name*\"\n                        description=\"A short name for your system, which will be displayed on\n                        the leaderboard. (Required)\"\n                        rules={formVal.submitName}\n                        error={errors.submitName}\n                        helperText={\n                            errors.submitName && errors.submitName.message\n                        }\n                    />\n\n                    <FormTextField\n                        control={control}\n                        className={classes.textField}\n                        name=\"modelDesc\"\n                        label=\"Model Description*\"\n                        description=\"A sentence or two describing your system. Make sure to mention any outside data you use. (Required)\"\n                        rules={formVal.modelDesc}\n                        error={errors.modelDesc}\n                        helperText={\n                            errors.modelDesc && errors.modelDesc.message\n                        }\n                    />\n\n                    <FormTextField\n                        control={control}\n                        className={classes.textField}\n                        name=\"huggingfaceOrganizationName\"\n                        label=\"Huggingface Organization Name*\"\n                        description=\"Organization Name of your huggingface model hub. (Required)\"\n                        rules={formVal.huggingfaceOrganizationName}\n                        error={errors.huggingfaceOrganizationName}\n                        helperText={\n                            errors.huggingfaceOrganizationName && errors.huggingfaceOrganizationName.message\n                        }\n                    />\n\n                    <FormTextField\n                        control={control}\n                        className={classes.textField}\n                        name=\"huggingfaceRepoName\"\n                        label=\"Huggingface Repository Name*\"\n                        description=\"Repository Name for your model. (Required)\"\n                        rules={formVal.huggingfaceRepoName}\n                        error={errors.huggingfaceRepoName}\n                        helperText={\n                            errors.huggingfaceRepoName && errors.huggingfaceRepoName.message\n                        }\n                    />\n\n                    <FormTextField\n                        control={control}\n                        className={classes.textField}\n                        name=\"huggingfaceCommonHash\"\n                        label=\"Huggingface Commit Hash (full 40 characters)*\"\n                        description=\"Commit hash (full 40 characters) of your model. (Required)\"\n                        rules={formVal.huggingfaceCommonHash}\n                        error={errors.huggingfaceCommonHash}\n                        helperText={\n                            errors.huggingfaceCommonHash && errors.huggingfaceCommonHash.message\n                        }\n                    />\n\n                    <FormTextField\n                        control={control}\n                        className={classes.textField}\n                        name=\"paramShared\"\n                        label=\"Parameter shared without fine-tuning*\"\n                        description=\"The total number of parameters in your model which don't require task spesific fine-tuning (only numeric numbers allowed). (Required)\"\n                        rules={formVal.paramShared}\n                        error={errors.paramShared}\n                        helperText={\n                            errors.paramShared && errors.paramShared.message\n                        }\n                    />\n\n                    <FormControl\n                        component=\"fieldset\"\n                        style={{ marginTop: \"2%\" }}\n                    >\n                        <FormLabel component=\"legend\"><HashLink to=\"/rules\">Track</HashLink></FormLabel>\n                        <Controller\n                            control={control}\n                            name=\"task\"\n                            render={({ field }) => (\n                                <RadioGroup\n                                    row\n                                    aria-label=\"position\"\n                                    {...field}\n                                >\n                                    {[tracks[0]].map((track, index) => {\n                                        return (\n                                            <ThemeProvider theme={track.theme}>\n                                                <FormControlLabel\n                                                    value={(\n                                                        index + 1\n                                                    ).toString()}\n                                                    control={\n                                                        <Radio color=\"primary\" />\n                                                    }\n                                                    label={\n                                                        <Typography color=\"primary\">\n                                                            {capitalizeFirstLetter(\n                                                                track.name.toLowerCase()\n                                                            )}\n                                                        </Typography>\n                                                    }\n                                                    color=\"primary\"\n                                                />\n                                            </ThemeProvider>\n                                        );\n                                    })}\n                                </RadioGroup>\n                            )}\n                        />\n                    </FormControl>\n                    <Button\n                        className={classes.Button}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={isLoading}\n                    >\n                        {isLoading ? \"Submitting...\" : \"Submit\"}\n                    </Button>\n                </form>\n            </Section>\n        )\n    }\n\n    return <HiddenPart />;\n} ","import React from \"react\";\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\nimport { makeStyles, ThemeProvider } from \"@material-ui/core/styles\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport { Box, Button, Grid, Typography, Link } from \"@material-ui/core\";\n\nimport { Title } from \"./components/Titles\";\nimport SubmitForm from \"./components/SubmitForm\";\nimport { Section } from \"./components/Sections\";\nimport { DescriptionButton, MultiLinkButton } from \"./components/Buttons\";\nimport { Strong, capitalizeFirstLetter } from \"./components/Utilies\";\nimport { tracks } from \"./Data\";\nimport AdaptiveLink from \"./components/AdaptiveLink\";\nimport { HashLink } from \"react-router-hash-link\";\n\nconst useStyles = makeStyles((theme) => ({}));\n\nexport default function Submit(props) {\n    const classes = useStyles();\n    const theme = useTheme();\n    const match = useRouteMatch();\n\n    return (\n        <Section>\n            <Switch>\n                <Route path={`${match.path}`} exact>\n                    <Section margin={theme.spacing(8, \"auto\", 1)}>\n                        <Title\n                            title=\"Rules\"\n                            description={\n                                <span>\n                                    Submissions are categorized into{\" \"}\n                                    <Strong>three tracks</Strong> for different\n                                    usages of the shared pretrained model, and\n                                    should follow the{\" \"}\n                                    <DescriptionButton\n                                        name=\"general rules\"\n                                        link={`${match.url}#general-rules`}\n                                    />\n                                    and the track-specific rules.\n                                </span>\n                            }\n                        />\n                        <Grid\n                            container\n                            direction=\"row\"\n                            spacing={4}\n                            justify=\"center\"\n                            alignItems=\"center\"\n                        >\n                            {tracks.map(\n                                ({ name, rules, submit, theme: trackTheme }) => {\n                                    return (\n                                        <Grid item>\n                                            <ThemeProvider theme={trackTheme}>\n                                                <div>\n                                                    <Typography\n                                                        component=\"span\"\n                                                        variant=\"body1\"\n                                                        color=\"primary\"\n                                                    >\n                                                        <strong>\n                                                            {capitalizeFirstLetter(\n                                                                name.toLowerCase()\n                                                            )}\n                                                        </strong>{\" \"}\n                                                        track\n                                                    </Typography>\n                                                    <Box\n                                                        marginTop={`${theme.spacing(\n                                                            1\n                                                        )}px`}\n                                                    >\n                                                        <MultiLinkButton\n                                                            buttons={[\n                                                                {\n                                                                    name: \"rules\",\n                                                                    link: rules\n                                                                        ? `${match.url}#${name}`\n                                                                        : null,\n                                                                },\n                                                            ]}\n                                                        />\n                                                    </Box>\n                                                </div>\n                                            </ThemeProvider>\n                                        </Grid>\n                                    );\n                                }\n                            )}\n                        </Grid>\n                    </Section>\n                    <Section anchorKey=\"general-rules\" margin={theme.spacing(8, \"auto\", 1)}>\n                        <Title\n                            title=\"General Rules\"\n                            description=\"The general rules applied to all tracks.\"\n                        />\n                        <Typography variant=\"body1\" color=\"textSecondary\">\n                            <p>The rules here apply to all the submissions, including</p>\n                            <p><HashLink to=\"/leaderboard?track=constrained&subset=Paper\">SUPERB Benchmark</HashLink></p>\n                            <p><HashLink to=\"/leaderboard?track=constrained&subset=Public+Set\">SUPERB Challenge Public-set</HashLink></p>\n                            <p><HashLink to=\"/leaderboard?track=constrained&subset=Hidden+Dev+Set\">SUPERB Challenge Hidden-set</HashLink></p>\n                        </Typography>\n                    </Section>\n                    <Section anchorKey=\"track-rules\" margin={theme.spacing(8, \"auto\", 1)}>\n                        <Title\n                            title=\"Track Rules\"\n                            description=\"The track-specific rules for each of the tracks.\"\n                        />\n                        {tracks.map(\n                            ({ name, rules, submit, theme: trackTheme }) => {\n                                return (\n                                    <ThemeProvider theme={trackTheme}>\n                                        <Box maxWidth={650} margin=\"auto\">\n                                            <Section anchorKey={name}>\n                                                <Title\n                                                    title={capitalizeFirstLetter(\n                                                        name.toLowerCase()\n                                                    )}\n                                                    titleVariant=\"h5\"\n                                                    titleColor=\"primary\"\n                                                    divider={false}\n                                                />\n                                                <Typography\n                                                    variant=\"body1\"\n                                                    color=\"textSecondary\"\n                                                >\n                                                    {rules}\n                                                </Typography>\n                                            </Section>\n                                        </Box>\n                                    </ThemeProvider>\n                                );\n                            }\n                        )}\n                    </Section>\n                    <Section anchorKey=\"download-example\" margin={theme.spacing(8, \"auto\", 1)}>\n                        <Title\n                            title=\"Submission example\"\n                            description=\"Download an example of submission.\"\n                        />\n                        <Typography variant=\"body1\" color=\"textSecondary\">\n                            The prediction output of each task should be put in seperated folder sepified by the task.\n                            Finally, please put all the task folders in one folder called <Strong>predict</Strong>{\" \"}\n                            and submit a zip archive. You can download an example for submission from this&nbsp;\n                            <Link href={\"/api/download/example\"} color=\"secondary\">Link</Link>.\n                        </Typography>\n                    </Section>\n                </Route>\n                {tracks.map((track) => {\n                    const { name, theme: trackTheme } = track;\n                    return (\n                        <Route path={`${match.path}/${name}`}>\n                            <ThemeProvider theme={trackTheme}>\n                                <SubmitForm {...track} />\n                            </ThemeProvider>\n                        </Route>\n                    );\n                })}\n            </Switch>\n        </Section>\n    );\n}\n","// model_name:{task1:{instance1:Score, instance2:score},\n//            task2:{instance1:score, instance2:score}...}\n\nconst raw_data = {\n  \"BERT-GSLM\": {\n    SpeechDetection: {\n      LJSpeech: 99.66,\n      \"LibriSpeech-TestClean\": 97.48,\n      \"LibriSpeech-TestOther\": 77.57,\n    },\n    SpeechTextMatching: {\n      LJSpeech: 54.11,\n      \"LibriSpeech-TestClean\": 57.82,\n      \"LibriSpeech-TestOther\": 54.02,\n    },\n    SpokenTermDetection: {\n      LJSpeech: 52.6,\n      \"LibriSpeech-TestClean\": 51.45,\n      \"LibriSpeech-TestOther\": 52.36,\n    },\n    EnhancementDetection: {\n      \"LibriTTS-TestClean_WHAM\": 74.26,\n    },\n    NoiseDetection: {\n      \"LJSpeech_MUSAN-Gaussain\": 83.17,\n      \"VCTK-MUSAN-Gaussain\": 90.98,\n    },\n    NoiseSNRLevelPrediction: {\n      \"VCTK_MUSAN-Gaussian\": 46.41,\n    },\n    ReverberationDetection: {\n      \"LJSpeech_RirsNoises-SmallRoom\": 58.61,\n      \"VCTK_RirsNoises-SmallRoom\": 55.92,\n    },\n    DialogueEmotionClassification: {\n      DailyTalk: 79.7,\n    },\n    EmotionRecognition: {\n      MultimodalEmotionlinesDataset: 0.0,\n    },\n    SpoofDetection: {\n      ASVspoof2015: 88.65,\n      ASVspoof2017: 42.57,\n    },\n    DialogueActClassification: {\n      DailyTalk: 45.65,\n    },\n    DialogueActPairing: {\n      DailyTalk: 48.6,\n    },\n    SpeakerCounting: {\n      \"LibriTTS-TestClean\": 55.45,\n    },\n    SpeakerVerification: {\n      \"LibriSpeech-TestClean\": 37.25,\n      VCTK: 42.36,\n    },\n  },\n  Whisper: {},\n  \"ImageBind-LLM\": {},\n  \"Whisper-LLM\": {},\n  \"ASR-ChatGPT\": {},\n};\n\nconst raw_data_seen = {\n  instances: [\n    {\n      Instance: \"BirdSoundDetection_Warblrb10k\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"ChordClassification_AcousticGuitarAndPiano\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"EnvironmentalSoundClassification_ESC50-Animals\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"EnvironmentalSoundClassification_ESC50-ExteriorAndUrbanNoises\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance:\n        \"EnvironmentalSoundClassification_ESC50-HumanAndNonSpeechSounds\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance:\n        \"EnvironmentalSoundClassification_ESC50-InteriorAndDomesticSounds\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance:\n        \"EnvironmentalSoundClassification_ESC50-NaturalSoundscapesAndWaterSounds\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"SpeechDetection_LJSpeech\",\n      \"BERT-GSLM\": \"99.66%\",\n      Whisper: \"99.99%\",\n      \"ImageBind-LLM\": \"99.75%\",\n      \"Whisper-LLM\": \"99.99%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"SpeechDetection_LibriSpeech-TestClean\",\n      \"BERT-GSLM\": \"97.48%\",\n      Whisper: \"99.92%\",\n      \"ImageBind-LLM\": \"89.73%\",\n      \"Whisper-LLM\": \"99.89%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"SpeechDetection_LibriSpeech-TestOther\",\n      \"BERT-GSLM\": \"77.57%\",\n      Whisper: \"99.73%\",\n      \"ImageBind-LLM\": \"82.85%\",\n      \"Whisper-LLM\": \"99.66%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"SpeechTextMatching_LJSpeech\",\n      \"BERT-GSLM\": \"54.11%\",\n      Whisper: \"96.56%\",\n      \"ImageBind-LLM\": \"51.40%\",\n      \"Whisper-LLM\": \"80.68%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"SpeechTextMatching_LibriSpeech-TestClean\",\n      \"BERT-GSLM\": \"57.82%\",\n      Whisper: \"91.56%\",\n      \"ImageBind-LLM\": \"51.53%\",\n      \"Whisper-LLM\": \"84.77%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"SpeechTextMatching_LibriSpeech-TestOther\",\n      \"BERT-GSLM\": \"54.02%\",\n      Whisper: \"91.19%\",\n      \"ImageBind-LLM\": \"49.74%\",\n      \"Whisper-LLM\": \"83.67%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"SpokenTermDetection_LJSpeech\",\n      \"BERT-GSLM\": \"52.60%\",\n      Whisper: \"96.32%\",\n      \"ImageBind-LLM\": \"59.77%\",\n      \"Whisper-LLM\": \"58.97%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"SpokenTermDetection_LibriSpeech-TestClean\",\n      \"BERT-GSLM\": \"51.45%\",\n      Whisper: \"92.44%\",\n      \"ImageBind-LLM\": \"46.07%\",\n      \"Whisper-LLM\": \"45.34%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"SpokenTermDetection_LibriSpeech-TestOther\",\n      \"BERT-GSLM\": \"52.36%\",\n      Whisper: \"90.03%\",\n      \"ImageBind-LLM\": \"47.53%\",\n      \"Whisper-LLM\": \"45.02%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"SpeechCommandRecognition_GoogleSpeechCommandsV1\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"LanguageIdentification_VoxForge\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"EnhancementDetection_LibriTTS-TestClean_WHAM\",\n      \"BERT-GSLM\": \"74.26%\",\n      Whisper: \"63.30%\",\n      \"ImageBind-LLM\": \"77.07%\",\n      \"Whisper-LLM\": \"91.52%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"NoiseDetection_LJSpeech_MUSAN-Gaussian\",\n      \"BERT-GSLM\": \"83.17%\",\n      Whisper: \"84.79%\",\n      \"ImageBind-LLM\": \"94.03%\",\n      \"Whisper-LLM\": \"99.66%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"NoiseDetection_VCTK-MUSAN-Gaussian\",\n      \"BERT-GSLM\": \"90.98%\",\n      Whisper: \"78.12%\",\n      \"ImageBind-LLM\": \"95.85%\",\n      \"Whisper-LLM\": \"98.11%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"NoiseDetection_LJSpeech_MUSAN-Music\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"NoiseDetection_VCTK_MUSAN-Music\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"NoiseDetection_LJSpeech_MUSAN-Noise\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"NoiseDetection_VCTK_MUSAN-Noise\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"NoiseDetection_LJSpeech_MUSAN-Speech\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"NoiseDetection_VCTK_MUSAN-Speech\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"NoiseSNRLevelPrediction_VCTK_MUSAN-Gaussian\",\n      \"BERT-GSLM\": \"46.41%\",\n      Whisper: \"35.21%\",\n      \"ImageBind-LLM\": \"47.66%\",\n      \"Whisper-LLM\": \"78.95%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"NoiseSNRLevelPrediction_VCTK_MUSAN-Music\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"NoiseSNRLevelPrediction_VCTK_MUSAN-Noise\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"NoiseSNRLevelPrediction_VCTK_MUSAN-Speech\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"ReverberationDetection_LJSpeech_RirsNoises-LargeRoom\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"ReverberationDetection_VCTK_RirsNoises-LargeRoom\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"ReverberationDetection_LJSpeech_RirsNoises-MediumRoom\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"ReverberationDetection_VCTK_RirsNoises-MediumRoom\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"ReverberationDetection_LJSpeech_RirsNoises-SmallRoom\",\n      \"BERT-GSLM\": \"58.61%\",\n      Whisper: \"86.91%\",\n      \"ImageBind-LLM\": \"71.79%\",\n      \"Whisper-LLM\": \"89.39%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"ReverberationDetection_VCTK_RirsNoises-SmallRoom\",\n      \"BERT-GSLM\": \"55.92%\",\n      Whisper: \"78.49%\",\n      \"ImageBind-LLM\": \"85.47%\",\n      \"Whisper-LLM\": \"88.44%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"AccentClassification_AccentdbExtended\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"DialogueEmotionClassification_DailyTalk\",\n      \"BERT-GSLM\": \"79.70%\",\n      Whisper: \"82.45%\",\n      \"ImageBind-LLM\": \"80.37%\",\n      \"Whisper-LLM\": \"82.68%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"EmotionRecognition_MultimodalEmotionlinesDataset\",\n      \"BERT-GSLM\": \"0.00%\",\n      Whisper: \"0.03%\",\n      \"ImageBind-LLM\": \"12.13%\",\n      \"Whisper-LLM\": \"11.21%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"HowFarAreYou_3DSpeaker\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"StressDetection_MIRSD\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"SpoofDetection_ASVspoof2015\",\n      \"BERT-GSLM\": \"88.65%\",\n      Whisper: \"94.07%\",\n      \"ImageBind-LLM\": \"94.19%\",\n      \"Whisper-LLM\": \"97.76%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"SpoofDetection_ASVspoof2017\",\n      \"BERT-GSLM\": \"42.57%\",\n      Whisper: \"21.16%\",\n      \"ImageBind-LLM\": \"52.53%\",\n      \"Whisper-LLM\": \"73.64%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"DialogueActClassification_DailyTalk\",\n      \"BERT-GSLM\": \"45.65%\",\n      Whisper: \"59.37%\",\n      \"ImageBind-LLM\": \"44.37%\",\n      \"Whisper-LLM\": \"61.06%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"IntentClassification_FluentSpeechCommands-Action\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"IntentClassification_FluentSpeechCommands-Location\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"IntentClassification_FluentSpeechCommands-Object\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"SarcasmDetection_Mustard\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"DialogueActPairing_DailyTalk\",\n      \"BERT-GSLM\": \"48.60%\",\n      Whisper: \"50.36%\",\n      \"ImageBind-LLM\": \"50.88%\",\n      \"Whisper-LLM\": \"49.84%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"SpeakerCounting_LibriTTS-TestClean\",\n      \"BERT-GSLM\": \"55.45%\",\n      Whisper: \"41.65%\",\n      \"ImageBind-LLM\": \"55.85%\",\n      \"Whisper-LLM\": \"87.00%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"SpeakerVerification_LibriSpeech-TestClean\",\n      \"BERT-GSLM\": \"37.25%\",\n      Whisper: \"74.80%\",\n      \"ImageBind-LLM\": \"17.80%\",\n      \"Whisper-LLM\": \"97.99%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"SpeakerVerification_VCTK\",\n      \"BERT-GSLM\": \"42.36%\",\n      Whisper: \"50.20%\",\n      \"ImageBind-LLM\": \"52.68%\",\n      \"Whisper-LLM\": \"92.00%\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"MultiSpeakerDetection_LibriSpeech-TestClean\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n    {\n      Instance: \"MultiSpeakerDetection_VCTK\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"\",\n    },\n  ],\n};\n\nconst raw_data_unseen = {\n  instances: [\n    {\n      Instance: \"BirdSoundDetection_Warblrb10k\",\n      \"BERT-GSLM\": \"0.00%\",\n      Whisper: \"0.00%\",\n      \"ImageBind-LLM\": \"28.29%\",\n      \"Whisper-LLM\": \"14.67%\",\n      \"ASR-ChatGPT\": \"14.71%\",\n    },\n    {\n      Instance: \"ChordClassification_AcousticGuitarAndPiano\",\n      \"BERT-GSLM\": \"0.00%\",\n      Whisper: \"0.00%\",\n      \"ImageBind-LLM\": \"44.35%\",\n      \"Whisper-LLM\": \"58.44%\",\n      \"ASR-ChatGPT\": \"2.79%\",\n    },\n    {\n      Instance: \"EnvironmentalSoundClassification_ESC50-Animals\",\n      \"BERT-GSLM\": \"0.00%\",\n      Whisper: \"4.00%\",\n      \"ImageBind-LLM\": \"73.75%\",\n      \"Whisper-LLM\": \"11.75%\",\n      \"ASR-ChatGPT\": \"15.50%\",\n    },\n    {\n      Instance: \"EnvironmentalSoundClassification_ESC50-ExteriorAndUrbanNoises\",\n      \"BERT-GSLM\": \"0.00%\",\n      Whisper: \"0.00%\",\n      \"ImageBind-LLM\": \"48.75%\",\n      \"Whisper-LLM\": \"3.50%\",\n      \"ASR-ChatGPT\": \"7.00%\",\n    },\n    {\n      Instance:\n        \"EnvironmentalSoundClassification_ESC50-HumanAndNonSpeechSounds\",\n      \"BERT-GSLM\": \"0.00%\",\n      Whisper: \"1.75%\",\n      \"ImageBind-LLM\": \"12.00%\",\n      \"Whisper-LLM\": \"6.00%\",\n      \"ASR-ChatGPT\": \"19.50%\",\n    },\n    {\n      Instance:\n        \"EnvironmentalSoundClassification_ESC50-InteriorAndDomesticSounds\",\n      \"BERT-GSLM\": \"0.00%\",\n      Whisper: \"0.00%\",\n      \"ImageBind-LLM\": \"20.25%\",\n      \"Whisper-LLM\": \"7.75%\",\n      \"ASR-ChatGPT\": \"4.00%\",\n    },\n    {\n      Instance:\n        \"EnvironmentalSoundClassification_ESC50-NaturalSoundscapesAndWaterSounds\",\n      \"BERT-GSLM\": \"0.00%\",\n      Whisper: \"0.00%\",\n      \"ImageBind-LLM\": \"22.75%\",\n      \"Whisper-LLM\": \"9.25%\",\n      \"ASR-ChatGPT\": \"4.75%\",\n    },\n    {\n      Instance: \"SpeechDetection_LJSpeech\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"54.26%\",\n    },\n    {\n      Instance: \"SpeechDetection_LibriSpeech-TestClean\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"55.69%\",\n    },\n    {\n      Instance: \"SpeechDetection_LibriSpeech-TestOther\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"52.26%\",\n    },\n    {\n      Instance: \"SpeechTextMatching_LJSpeech\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"80.99%\",\n    },\n    {\n      Instance: \"SpeechTextMatching_LibriSpeech-TestClean\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"52.18%\",\n    },\n    {\n      Instance: \"SpeechTextMatching_LibriSpeech-TestOther\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"75.40%\",\n    },\n    {\n      Instance: \"SpokenTermDetection_LJSpeech\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"48.04%\",\n    },\n    {\n      Instance: \"SpokenTermDetection_LibriSpeech-TestClean\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"79.58%\",\n    },\n    {\n      Instance: \"SpokenTermDetection_LibriSpeech-TestOther\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"78.73%\",\n    },\n    {\n      Instance: \"SpeechCommandRecognition_GoogleSpeechCommandsV1\",\n      \"BERT-GSLM\": \"0.08%\",\n      Whisper: \"8.46%\",\n      \"ImageBind-LLM\": \"4.31%\",\n      \"Whisper-LLM\": \"3.90%\",\n      \"ASR-ChatGPT\": \"41.61%\",\n    },\n    {\n      Instance: \"LanguageIdentification_VoxForge\",\n      \"BERT-GSLM\": \"0.00%\",\n      Whisper: \"20.28%\",\n      \"ImageBind-LLM\": \"26.99%\",\n      \"Whisper-LLM\": \"13.54%\",\n      \"ASR-ChatGPT\": \"96.53%\",\n    },\n    {\n      Instance: \"EnhancementDetection_LibriTTS-TestClean_WHAM\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"63.32%\",\n    },\n    {\n      Instance: \"NoiseDetection_LJSpeech_MUSAN-Gaussian\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"49.02%\",\n    },\n    {\n      Instance: \"NoiseDetection_VCTK-MUSAN-Gaussian\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"50.28%\",\n    },\n    {\n      Instance: \"NoiseDetection_LJSpeech_MUSAN-Music\",\n      \"BERT-GSLM\": \"60.53%\",\n      Whisper: \"49.46%\",\n      \"ImageBind-LLM\": \"51.92%\",\n      \"Whisper-LLM\": \"60.49%\",\n      \"ASR-ChatGPT\": \"49.62%\",\n    },\n    {\n      Instance: \"NoiseDetection_VCTK_MUSAN-Music\",\n      \"BERT-GSLM\": \"25.78%\",\n      Whisper: \"49.80%\",\n      \"ImageBind-LLM\": \"53.34%\",\n      \"Whisper-LLM\": \"57.99%\",\n      \"ASR-ChatGPT\": \"49.30%\",\n    },\n    {\n      Instance: \"NoiseDetection_LJSpeech_MUSAN-Noise\",\n      \"BERT-GSLM\": \"48.84%\",\n      Whisper: \"50.58%\",\n      \"ImageBind-LLM\": \"55.29%\",\n      \"Whisper-LLM\": \"59.01%\",\n      \"ASR-ChatGPT\": \"49.52%\",\n    },\n    {\n      Instance: \"NoiseDetection_VCTK_MUSAN-Noise\",\n      \"BERT-GSLM\": \"9.23%\",\n      Whisper: \"51.18%\",\n      \"ImageBind-LLM\": \"57.08%\",\n      \"Whisper-LLM\": \"58.26%\",\n      \"ASR-ChatGPT\": \"49.61%\",\n    },\n    {\n      Instance: \"NoiseDetection_LJSpeech_MUSAN-Speech\",\n      \"BERT-GSLM\": \"53.20%\",\n      Whisper: \"49.76%\",\n      \"ImageBind-LLM\": \"50.21%\",\n      \"Whisper-LLM\": \"66.68%\",\n      \"ASR-ChatGPT\": \"49.63%\",\n    },\n    {\n      Instance: \"NoiseDetection_VCTK_MUSAN-Speech\",\n      \"BERT-GSLM\": \"19.00%\",\n      Whisper: \"51.45%\",\n      \"ImageBind-LLM\": \"48.32%\",\n      \"Whisper-LLM\": \"61.91%\",\n      \"ASR-ChatGPT\": \"49.96%\",\n    },\n    {\n      Instance: \"NoiseSNRLevelPrediction_VCTK_MUSAN-Gaussian\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"19.82%\",\n    },\n    {\n      Instance: \"NoiseSNRLevelPrediction_VCTK_MUSAN-Music\",\n      \"BERT-GSLM\": \"28.99%\",\n      Whisper: \"20.73%\",\n      \"ImageBind-LLM\": \"17.79%\",\n      \"Whisper-LLM\": \"20.47%\",\n      \"ASR-ChatGPT\": \"19.41%\",\n    },\n    {\n      Instance: \"NoiseSNRLevelPrediction_VCTK_MUSAN-Noise\",\n      \"BERT-GSLM\": \"26.83%\",\n      Whisper: \"22.06%\",\n      \"ImageBind-LLM\": \"21.98%\",\n      \"Whisper-LLM\": \"22.70%\",\n      \"ASR-ChatGPT\": \"19.30%\",\n    },\n    {\n      Instance: \"NoiseSNRLevelPrediction_VCTK_MUSAN-Speech\",\n      \"BERT-GSLM\": \"19.63%\",\n      Whisper: \"26.39%\",\n      \"ImageBind-LLM\": \"18.25%\",\n      \"Whisper-LLM\": \"20.17%\",\n      \"ASR-ChatGPT\": \"19.18%\",\n    },\n    {\n      Instance: \"ReverberationDetection_LJSpeech_RirsNoises-LargeRoom\",\n      \"BERT-GSLM\": \"62.56%\",\n      Whisper: \"89.39%\",\n      \"ImageBind-LLM\": \"43.14%\",\n      \"Whisper-LLM\": \"89.75%\",\n      \"ASR-ChatGPT\": \"48.16%\",\n    },\n    {\n      Instance: \"ReverberationDetection_VCTK_RirsNoises-LargeRoom\",\n      \"BERT-GSLM\": \"60.88%\",\n      Whisper: \"85.93%\",\n      \"ImageBind-LLM\": \"73.14%\",\n      \"Whisper-LLM\": \"78.80%\",\n      \"ASR-ChatGPT\": \"47.47%\",\n    },\n    {\n      Instance: \"ReverberationDetection_LJSpeech_RirsNoises-MediumRoom\",\n      \"BERT-GSLM\": \"67.12%\",\n      Whisper: \"89.12%\",\n      \"ImageBind-LLM\": \"51.75%\",\n      \"Whisper-LLM\": \"90.06%\",\n      \"ASR-ChatGPT\": \"47.87%\",\n    },\n    {\n      Instance: \"ReverberationDetection_VCTK_RirsNoises-MediumRoom\",\n      \"BERT-GSLM\": \"57.74%\",\n      Whisper: \"84.00%\",\n      \"ImageBind-LLM\": \"77.17%\",\n      \"Whisper-LLM\": \"80.04%\",\n      \"ASR-ChatGPT\": \"47.76%\",\n    },\n    {\n      Instance: \"ReverberationDetection_LJSpeech_RirsNoises-SmallRoom\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"48.26%\",\n    },\n    {\n      Instance: \"ReverberationDetection_VCTK_RirsNoises-SmallRoom\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"48.00%\",\n    },\n    {\n      Instance: \"AccentClassification_AccentdbExtended\",\n      \"BERT-GSLM\": \"0.00%\",\n      Whisper: \"0.00%\",\n      \"ImageBind-LLM\": \"19.08%\",\n      \"Whisper-LLM\": \"4.33%\",\n      \"ASR-ChatGPT\": \"6.63%\",\n    },\n    {\n      Instance: \"DialogueEmotionClassification_DailyTalk\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"57.76%\",\n    },\n    {\n      Instance: \"EmotionRecognition_MultimodalEmotionlinesDataset\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"50.03%\",\n    },\n    {\n      Instance: \"HowFarAreYou_3DSpeaker\",\n      \"BERT-GSLM\": \"0.00%\",\n      Whisper: \"0.00%\",\n      \"ImageBind-LLM\": \"7.42%\",\n      \"Whisper-LLM\": \"0.05%\",\n      \"ASR-ChatGPT\": \"0.50%\",\n    },\n    {\n      Instance: \"StressDetection_MIRSD\",\n      \"BERT-GSLM\": \"37.89%\",\n      Whisper: \"25.47%\",\n      \"ImageBind-LLM\": \"35.20%\",\n      \"Whisper-LLM\": \"15.52%\",\n      \"ASR-ChatGPT\": \"15.32%\",\n    },\n    {\n      Instance: \"SpoofDetection_ASVspoof2015\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"14.75%\",\n    },\n    {\n      Instance: \"SpoofDetection_ASVspoof2017\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"15.34%\",\n    },\n    {\n      Instance: \"DialogueActClassification_DailyTalk\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"62.88%\",\n    },\n    {\n      Instance: \"IntentClassification_FluentSpeechCommands-Action\",\n      \"BERT-GSLM\": \"0.00%\",\n      Whisper: \"1.28%\",\n      \"ImageBind-LLM\": \"20.53%\",\n      \"Whisper-LLM\": \"17.29%\",\n      \"ASR-ChatGPT\": \"85.67%\",\n    },\n    {\n      Instance: \"IntentClassification_FluentSpeechCommands-Location\",\n      \"BERT-GSLM\": \"0.00%\",\n      Whisper: \"1.82%\",\n      \"ImageBind-LLM\": \"14.30%\",\n      \"Whisper-LLM\": \"14.94%\",\n      \"ASR-ChatGPT\": \"83.85%\",\n    },\n    {\n      Instance: \"IntentClassification_FluentSpeechCommands-Object\",\n      \"BERT-GSLM\": \"0.00%\",\n      Whisper: \"0.22%\",\n      \"ImageBind-LLM\": \"13.31%\",\n      \"Whisper-LLM\": \"4.83%\",\n      \"ASR-ChatGPT\": \"75.89%\",\n    },\n    {\n      Instance: \"SarcasmDetection_Mustard\",\n      \"BERT-GSLM\": \"21.16%\",\n      Whisper: \"51.74%\",\n      \"ImageBind-LLM\": \"50.72%\",\n      \"Whisper-LLM\": \"46.52%\",\n      \"ASR-ChatGPT\": \"64.06%\",\n    },\n    {\n      Instance: \"DialogueActPairing_DailyTalk\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"47.45%\",\n    },\n    {\n      Instance: \"SpeakerCounting_LibriTTS-TestClean\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"19.60%\",\n    },\n    {\n      Instance: \"SpeakerVerification_LibriSpeech-TestClean\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"45.44%\",\n    },\n    {\n      Instance: \"SpeakerVerification_VCTK\",\n      \"BERT-GSLM\": \"\",\n      Whisper: \"\",\n      \"ImageBind-LLM\": \"\",\n      \"Whisper-LLM\": \"\",\n      \"ASR-ChatGPT\": \"42.62%\",\n    },\n    {\n      Instance: \"MultiSpeakerDetection_LibriSpeech-TestClean\",\n      \"BERT-GSLM\": \"22.60%\",\n      Whisper: \"56.40%\",\n      \"ImageBind-LLM\": \"37.55%\",\n      \"Whisper-LLM\": \"59.25%\",\n      \"ASR-ChatGPT\": \"46.80%\",\n    },\n    {\n      Instance: \"MultiSpeakerDetection_VCTK\",\n      \"BERT-GSLM\": \"42.95%\",\n      Whisper: \"59.65%\",\n      \"ImageBind-LLM\": \"53.25%\",\n      \"Whisper-LLM\": \"62.00%\",\n      \"ASR-ChatGPT\": \"47.25%\",\n    },\n  ],\n};\n\nconst column_fields = [\n  \"Model Name\",\n  \"BirdSoundDetection\",\n  \"ChordClassification\",\n  \"EnvironmentalSoundClassification\",\n  \"SpeechDetection\",\n  \"SpeechTextMatching\",\n  \"SpokenTermDetection\",\n  \"SpeechCommandRecognition\",\n  \"LanguageIdentification\",\n  \"EnhancementDetection\",\n  \"NoiseDetection\",\n  \"NoiseSNRLevelPrediction\",\n  \"ReverberationDetection\",\n  \"AccentClassification\",\n  \"DialogueEmotionClassification\",\n  \"EmotionRecognition\",\n  \"HowFarAreYou\",\n  \"StressDetection\",\n  \"SpoofDetection\",\n  \"DialogueActClassification\",\n  \"IntentClassification\",\n  \"SarcasmDetection\",\n  \"DialogueActPairing\",\n  \"SpeakerCounting\",\n  \"SpeakerVerification\",\n  \"MultiSpeakerDetection\",\n];\n\nconst models = [\n  \"BERT-GSLM\",\n  \"Whisper\",\n  \"ImageBind-LLM\",\n  \"Whisper-LLM\",\n  \"ASR-ChatGPT\",\n];\n\n// Generate columns based on the data\n// field is the 'key' that is used to access the data in the rows\nconst columns = [];\nfor (const field of column_fields) {\n  const column = {\n    field: field,\n    width: 150,\n    headerAlign: \"center\",\n    align: \"center\",\n    headerClassName: \"data-grid-header\",\n  };\n  columns.push(column);\n}\n\n// Generate rows based on the data\nconst rows = [];\nlet idCounter = 1;\nfor (const model in raw_data) {\n  const row = { id: idCounter, \"Model Name\": model };\n  for (const task in raw_data[model]) {\n    // Take the average of the scores for each instance under each task\n    const instances = Object.keys(raw_data[model][task]);\n    let sum = 0;\n    for (const instance of instances) {\n      sum += raw_data[model][task][instance];\n    }\n    // round to 2 decimal places\n    let score = 0;\n    score = Math.round((sum / instances.length) * 100) / 100;\n    row[task] = score;\n  }\n  rows.push(row);\n  idCounter++;\n}\n\n// Transpose version\n// Generate columns based on the data\nconst columns_transpose = [];\ncolumns_transpose.push({\n  field: \"Task\",\n  width: 200,\n  headerAlign: \"left\",\n  align: \"left\",\n  headerClassName: \"data-grid-header\",\n});\ncolumns_transpose.push({\n  field: \"Dataset\",\n  width: 200,\n  headerAlign: \"left\",\n  align: \"left\",\n  headerClassName: \"data-grid-header\",\n});\nfor (const field of models) {\n  const column = {\n    field: field,\n    width: 150,\n    headerAlign: \"center\",\n    align: \"center\",\n    headerClassName: \"data-grid-header\",\n    renderCell: (params) => (\n      params.value !== \"N/A\" ?\n      (\n      params.row.best === field ?\n      <strong>{params.value}</strong>\n      :\n      <span>{params.value}</span>\n      )\n      :\n      <span style={{color: \"#d0d0d0\"}}>N/A</span>\n    )\n  };\n  columns_transpose.push(column);\n}\n\nconst acc_to_float = (acc) => {\n  return acc !== \"N/A\" ? parseFloat(acc.slice(0,-1)) : -1;\n}\n\n// Generate rows based on the data\nconst rows_transpose_seen = [];\nconst rows_transpose_unseen = [];\nconst rows_transpose_all = [];\nfor (let index = 0; index < raw_data_seen.instances.length; index++) {\n  const instances_seen = raw_data_seen.instances[index];\n  const instances_unseen = raw_data_unseen.instances[index];\n\n  const underscore = instances_seen[\"Instance\"].indexOf(\"_\");\n  const task = instances_seen[\"Instance\"].slice(0, underscore);\n  const dataset = instances_seen[\"Instance\"].slice(underscore + 1);\n\n  const row_seen = { id: index, Task: task, Dataset: dataset };\n  const row_unseen = { id: index, Task: task, Dataset: dataset };\n  const row_all = { id: index, Task: task, Dataset: dataset };\n\n  for (const model of models) {\n    row_seen[model] = instances_seen[model] || \"N/A\";\n    row_unseen[model] = instances_unseen[model] || \"N/A\";\n    row_all[model] = instances_seen[model] || instances_unseen[model];\n  }\n\n  row_seen.best = models.reduce(function(a, b){ return acc_to_float(row_seen[a]) > acc_to_float(row_seen[b]) ? a : b });\n  row_unseen.best = models.reduce(function(a, b){ return acc_to_float(row_unseen[a]) > acc_to_float(row_unseen[b]) ? a : b });\n  row_all.best = models.reduce(function(a, b){ return acc_to_float(row_all[a]) > acc_to_float(row_all[b]) ? a : b });\n\n  rows_transpose_seen.push(row_seen);\n  rows_transpose_unseen.push(row_unseen);\n  rows_transpose_all.push(row_all);\n}\n\nexport {\n  columns,\n  rows,\n  columns_transpose,\n  rows_transpose_seen,\n  rows_transpose_unseen,\n  rows_transpose_all,\n};\n","import * as React from \"react\";\nimport {\n  DataGrid,\n  GridRowsProp,\n  GridColDef,\n  GridToolbarContainer,\n  GridToolbarColumnsButton,\n  GridToolbarFilterButton,\n  GridToolbarExport,\n  GridToolbarDensitySelector,\n} from \"@mui/x-data-grid\";\nimport {\n  //columns,\n  //rows,\n  columns_transpose,\n  rows_transpose_seen,\n  rows_transpose_unseen,\n  rows_transpose_all,\n} from \"./leaderboardData.js\";\nimport { styled } from \"@mui/material/styles\";\nimport {\n  Box,\n  Tab,\n  Tabs,\n  Paper,\n  Typography,\n  IconButton,\n  Popover\n} from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport HelpIcon from \"@material-ui/icons/Help\";\n\nconst StyledDataGrid = styled(DataGrid)(({ theme }) => ({\n  \"& .MuiDataGrid-columnHeader, .MuiDataGrid-cell\": {\n    borderRight: \"1px solid #d0d0d0\",\n  },\n  \"& .MuiDataGrid-columnHeader\": {\n    backgroundColor: \"#e0e0e0\",\n  },\n}));\n\nexport default function App() {\n  const [rows, setrows] = useState(rows_transpose_all);\n  const [columns, setcolumns] = useState(columns_transpose);\n\n  const [value, setValue] = React.useState(0);\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const OpenInfo = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const CloseInfo = () => {\n    setAnchorEl(null);\n  };\n\n  const infoOpen = Boolean(anchorEl);\n  const infoId = infoOpen ? 'simple-popover' : undefined;\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n    if (newValue === 0) {\n      setrows(rows_transpose_all);\n    } else if (newValue === 1) {\n      setrows(rows_transpose_seen);\n    } else if (newValue === 2) {\n      setrows(rows_transpose_unseen);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"calc(100vh - 160px)\",\n        maxWidth: \"1170px\",\n        margin: \"auto\",\n      }}\n    >\n      <Paper variant=\"outlined\">\n        <Box\n          sx={{\n            height: \"48px\",\n            display: \"flex\",\n            justifyContent: \"flex-start\",\n            alignItems: \"center\",\n            gap: \"0.5em\",\n          }}\n        >\n          <div style={{ width: \"1em\" }}></div>\n          <Typography variant=\"h5\">Leaderboard</Typography>\n          <IconButton size=\"small\" onClick={OpenInfo}>\n            <HelpIcon fontSize=\"inherit\" />\n          </IconButton>\n          <Popover\n            id={infoId}\n            open={infoOpen}\n            anchorEl={anchorEl}\n            onClose={CloseInfo}\n            anchorOrigin={{\n              vertical: \"bottom\",\n              horizontal: \"center\",\n            }}\n            transformOrigin={{\n              vertical: \"top\",\n              horizontal: \"center\",\n            }}\n          >\n            <Typography style={{padding: \"1em\"}}>\n              <strong>Seen</strong>: The model has been trained on this task.<br />\n              <strong>Unseen</strong>: The model has not been trained on this task.<br />\n              All metrics for the current benchmark tasks are <strong>ACCURACY</strong>.\n            </Typography>\n          </Popover>\n        </Box>\n        <Box sx={{ backgroundColor: \"#f0f0f0\" }}>\n          <Tabs\n            value={value}\n            indicatorColor=\"secondary\"\n            textColor=\"secondary\"\n            onChange={handleChange}\n          >\n            <Tab label=\"All\" />\n            <Tab label=\"Seen\" />\n            <Tab label=\"Unseen\" />\n          </Tabs>\n        </Box>\n      </Paper>\n      <StyledDataGrid\n        rows={rows}\n        columns={columns}\n        disableRowSelectionOnClick\n        hideFooter\n      />\n    </div>\n  );\n}\n","const policy = String.raw`\n# SUPERB Challenge\n\n## Evaluation Framework\n\n### Background\n\n![](https://i.imgur.com/FDARwvz.png)\n*Fig 1.*\n\nSUPERB Challenge follows the similar evaluation framework introduced in [SUPERB Benchmark](https://arxiv.org/abs/2105.01051), which benchmarks the **generalizability** of Self-Supervised Learning (SSL) on speech. SSL models are termed **Upstream** and are evaluated with various **Downstream** tasks. The framework extract **multiple frozen hidden states** from a single upstream model and trains a learnable **weighted-sum** over the hidden states along with the downstream model task-by-task.\n\n### Overview\n\n![](https://i.imgur.com/BNr2gfE.png)\n*Fig 2.*\n\nFig 2. illustrates the evaluation framework of the challenge. The challenge evaluates SSL models' generalizability on 10 tasks. Each of the tasks has a corresponding public dataset (**public-set**) that is publicly available, and a hidden dataset (**hidden-set**) that will not be released. Participants can practice on the public-set to understand the performance of their upstream models, and choose the best one for submission as they wish. Then, participants **submit the upstream model** (model definition & pre-trained weights) publicly or privately to the hidden-set leaderboard. **We finetune the downstream models on the hidden-set** without releasing any audio/label. Both public-set and hidden-set have leaderboards and welcome submissions to share more results with the community. **The winners of the challenge will be solely determined by the ranking on the hidden-set leaderboard.** Finally, there will be **overall metrics** for ranking all upstreams.\n\nAll the participants are encouraged to submit papers to [*AAAI workshop: The 2nd Self-supervised Learning for Audio and Speech Processing*](https://aaai-sas-2022.github.io/). The winners of the challenge will be invited to present their methods in the workshop. We plan to collaborate with more conferences for participants to present their works and papers.\n\n### Tasks\n\n10 evaluation tasks are included in this challenge:\n\n- **Content**\n    - Phoneme Recognition (PR)\n    - Automatic Speech Recognition (ASR)\n    - Query-by-example Spoken Term Detection (QbE)\n- **Speaker**\n    - Speaker Identification (SID)\n    - Automatic Speaker Verification (ASV)\n    - Speaker Diarization (SD)\n- **Paralinguistics**\n    - Emotion Recognition (ER)\n- **Semantics**\n    - Speech Translation (ST)\n- **Generation**\n    - Speech Enhancement (SE)\n    - Speech Separation (SS)\n\nMore task descriptions for the public-set can be found in [TASKS](https://superbbenchmark.org/tasks), and we implement the evaluation scripts for public-set in [S3PRL](https://github.com/s3prl/s3prl/blob/master/s3prl/downstream/docs/superb.md) for reference. The task design and evaluation pipeline will be the same between public-set & hidden-set unless otherwise mentioned.\n\n### Secret tasks\n\nSecret tasks evaluate SSL models' generalizability on completely unseen tasks. Secret tasks are only present in the hidden-set, and the task design will not be revealed until the final winner announcement. \n\n### What is new\n\nCompared with SUPERB Benchmark, SUPERB Challenge extends the framework with the following:\n\n- **New Tasks**: Speech Translation, Speech Enhancement, Source Separation and secret tasks.\n- **New Data Domains**: A challenging and newly recorded hidden-set with unseen (to upstream) text/audio domain.\n- **New Overall Metrics**: The metrics to rank upstreams.\n\n\n## Upstream Specification\n\n### Unlabeled data only: Focus on SSL\n\n- Any labeled/parallel data made by human annotators are **not allowed** to used for both model training and data preprocessing, e.g.\n    - **audio/text pairs:** transcriptions in English, foreign languages, or phonemes.\n    - **audio/tagging pairs:** speaker labels or sound event labels.\n    - **audio/audio pairs:** audios with the same properties made parallel by human, e.g. audios with same content from different speakers, or the opposite.\n- Any system pre-trained by labeled/parallel data **cannot** be used to help with the SSL pre-training, like pre-trained ASR.\n- Any unlabeled/unparallel data is allowed, including the downstream datasets in the public-set. The nature alignments (not made by human annotators) bettwen audio and other modalities are also allowed, e.g. videos.\n- If it is hard to define whether your data is labeled/parallel, please [contact us](#Contact)!\n\n### Programming Language\n\n- We currently support:\n    - **Python >= 3.6**\n    - **Pytorch >= 1.7**\n\n- We expect the upstream submission can pass the following check:\n    ~~~python=\n    upstream = YourModel.cuda()\n    assert isinstance(upstream, torch.nn.Module)\n    ~~~\n\n\nWe accept upstream models in PyTorch by default. If you wish to submit upstreams in non-PyTorch frameworks, please [fill this form](https://docs.google.com/forms/d/e/1FAIpQLSe52jYL2Yk9oYqXfg_Bg0Sjp01a6HSLUhY5VohsZOE5sNmgsw/viewform)!\nIf you are not feasible to submit the pre-trained model, please [fill this form](https://docs.google.com/forms/d/e/1FAIpQLSdA44nArlIDfGV63WwtwXer4WAPQO1aBwEpAjDSNjbMQN-GJQ/viewform) for us to see how to help!\n\n### Interface functions\n\n#### forward\n\nExtract features from waveforms.\n\n- **Input:** A list of waveforms in 16000 Hz\n\n    ~~~python=\n    SAMPLE_RATE = 16000\n    BATCH_SIZE = 8\n    EXAMPLE_SEC = 10\n    wavs = [torch.randn(SAMPLE_RATE * EXAMPLE_SEC).cuda() for _ in range(BATCH_SIZE)]\n    results = upstream(wavs)\n    ~~~\n\n- **Output:** A dictionary with a key for each task, and a single key for all secret tasks. If any task-specific key is not presented, a \"hidden_states\" key should be provided as the default key. The value for each key is **a list** of padded sequences in the same shape of **(batch_size, max_sequence_length_of_batch, hidden_size)** for weighted-sum to work. It is welcomed to perform some preprocessing on the upstream's raw hidden-sets, including upsampling and downsampling. However, all the values must come from **a single upstream model**:\n\n    ~~~python=\n    assert isinstance(results, dict)\n    tasks = [\"PR\", \"SID\", \"ER\", \"ASR\", \"ASV\", \"SD\", \"QbE\", \"ST\", \"SS\", \"SE\", \"secret\"]\n    for task in tasks:\n        hidden_states = results.get(task, \"hidden_states\")\n        assert isinstance(hidden_states, list)\n\n        for state in hidden_states:\n            assert isinstance(state, torch.Tensor)\n            assert state.dim() == 3, \"(batch_size, max_sequence_length_of_batch, hidden_size)\"\n            assert state.shape == hidden_states[0].shape\n    ~~~\n\n#### get_downsample_rates\n\nProvide the downsample rate **from 16000 Hz waveforms** for each task's representation in the dict. For the standard 10ms stride representation, the downsample rate is 160.\n\n~~~python=\nSAMPLE_RATE = 16000\nMSEC_PER_SEC = 1000\ndownsample_rate = SAMPLE_RATE * 10 / MSEC_PER_SEC  # 160\n~~~\n\nThe downsample rate will be used to:\n\n1. Calculate the valid representation length of each utterance in the output padded representation.\n2. Prepare the training materials according to the representation's downsample rate for frame-level tasks: SD, SE, SS.\n\n- **Input:** the task key (str)\n- **Output:** the downsample rate (int) of the representation for that task\n\n~~~python=\nfor task in tasks:\n    assert isinstance(task, str)\n    downsample_rate = upstream.get_downsample_rate(task)\n    assert isinstance(downsample_rate, int)\n    print(\"The upstream's representation for {task}\"\n        f\" has the downsample rate of {downsample_rate}.\")\n~~~\n\n## Public-set and S3PRL toolkit\n\n### As the task definition and demonstration\n\nThe public-set serves as the demonstration of the task design: including the data preprocessing, tasks' input/output formats and task-specific metrics. The datasets used in the public-set are all chosen to be public available for everyone to participate. Please refer to [TASKS](https://superbbenchmark.org/tasks) and the implementation in [S3PRL](https://github.com/s3prl/s3prl/blob/master/s3prl/downstream/docs/superb.md) for details.\n\n### As the platform for developing upstreams for the hidden-set\n\nThe differences between the public-set and the hidden-set are controlled to be only the following:\n\n1. Recording conditions\n2. Spoken content / text scripts\n3. Speakers\n4. Fewer labeled data\n\nIn this way, the public-set is still a good indicator of the hidden-set performance to some degree. We follow the same (unless mentioned otherwise in [TASKS](/tasks)) implementation in the public-set for the hidden-set, and hence encourage participants to use [S3PRL](https://github.com/s3prl/s3prl/blob/master/s3prl/downstream/docs/superb.md) to benchmark their upstream models (optional) on the public-set. The winners of the challenge will be decided solely on the hidden-set, and the public-set and [S3PRL](https://github.com/s3prl/s3prl/blob/master/s3prl/downstream/docs/superb.md) implementations can serve as the start-kit.\n\n### Provide baselines for comparison\n\n#### Baselines\n\nWe collected most of the well-known SSL baseline models in [S3PRL](https://github.com/s3prl/s3prl/blob/master/s3prl/downstream/docs/superb.md), including TERA, wav2vec2, Hubert, DeCoAR 2.0, and more. You can easily benchmark different upstreams by specifying in the command line arguments.\n\n#### Comparison\n\nSince the full benchmarking on the public-set can take some time for the training to converge. We released the [training artifacts](https://github.com/s3prl/s3prl/blob/master/s3prl/downstream/docs/superb_artifacts.md) of the top baseline systems (e.g. wav2vec2, HuBERT) for participants to quickly compare with them. The artifacts include:\n\n- Tensorboard logs\n- Trained downstream weights (the best on public dev set)\n\n### Public-set leaderboard and submission\n\nThe [public-set leaderboard](leaderboard?subset=Public+Set&track=constrained) is online and [accepts submissions](submit?type=public). There is no deadline. Since all the train/dev/test splits are public available, **the leaderboard accepts submissions with the inferenced prediction files on each task's testing split** which will be auto-generated if you follow the benchmarking steps in [S3PRL](https://github.com/s3prl/s3prl/blob/master/s3prl/downstream/docs/superb.md).\n\n## Hidden-set\n\n### Fairness & prevent overfitting\n\nSince all the train/dev/test splits are public in the public-set, it is possible to cheat by directly reporting the best results on the testing split, and the results are thus overfit on the testing split. Hence, the hidden-set is collected and prepared to follow the same task design as that in the public-set but with the newly created data. All the splits will **NOT be released in both audio and labels**. The members involved in the hidden-set preparation should **NOT** participate the challenge. These members are listed in the **Hidden-set Committee** below.\n\n### Hidden-set leaderboard and submission\n\n#### Submission type\n\nThe leaderboard accepts **submissions with the upstream model solely**, including **model definition** and **pre-trained weights**. The upstream model should follow the specification detailed at [Upstream Specification](#Upstream-Specification). The submission can be done publicly or privately. Only the **Hidden-set Committee** members can access the privately submitted upstreams and the models will be used solely for this challenge.\n\n- We accept upstream models in PyTorch by default. If you wish to submit upstreams in non-PyTorch frameworks, please [fill this form](https://docs.google.com/forms/d/e/1FAIpQLSe52jYL2Yk9oYqXfg_Bg0Sjp01a6HSLUhY5VohsZOE5sNmgsw/viewform)!\n- If you are not feasible to submit the pre-trained model, please [fill this form](https://docs.google.com/forms/d/e/1FAIpQLSdA44nArlIDfGV63WwtwXer4WAPQO1aBwEpAjDSNjbMQN-GJQ/viewform) for us to see how to help!\n\n#### Finetuning on submission\n\nAfter the upstream model is submitted, we **benchmark the submitted upstream by finetuning each task's downstream model for participants**. **The quota for submissions per week is limited and starts from 2 times/week,** but will be dynamically adjusted based on the number of participants. The quota adjustment will be announced at [NEWS](https://superbbenchmark.org/news). Participants can [contact us](#Contact) to acquire the finetuning artifacts of their own submissions for sanity checks, including:\n\n- Tensorboard logs\n- Testing results\n- Trained downstream weights\n\n#### Practice (dev) / Private (test) scores\n\nAfter training the downstream model for all tasks, we show the best performance on the hidden-set's development splits as the **practice scores** (one score per task). The true performance on the testing splits, termed **private scores**, will be revealed along with the final winner announcement. The final team ranking will depend only on the hidden-set's **private scores**.\n\n#### How to submit\n\n(Update 10/20/2021 AOE)\n\nThe [hidden-set leaderboard](leaderboard?subset=Hidden+Dev+Set&track=constrained) is online and accepts submissions. Please follow [the submission steps](https://huggingface.co/superb/superb-submission). We use HuggingFace's Hub to host the submitted upstreams and track the submitted model weights. On the other hand, we use our [submission page](submit?type=hidden) to control the submission limit, where the participants tell us the locations of their models on HuggingFace's Hub.\n\nAfter submitting via the submission page, you will see a new entry in the **submission history** under your Profile page, and the evaluation results on the hidden-set will be revealed at the entry within one week.\nPlease stay tuned!\n\n(Update 10/31/2021 AOE)\n\nAll the submitted results will remain anonymous during and after the challenge.\nYou can select a few submissions to show on the leaderboard.\nIf no submission is selected, we will show all your submissions on the leaderboard anonymously.\nOnly you can see your personal/model information on the leaderboard, but you will not see others'.\nIf you wish to reveal your personal/model information on the [hidden-set leaderboard](leaderboard?subset=Hidden+Dev+Set&track=constrained), please [contact us](#Contact)!\n\n## Overall Metrics\n\n(Update 10/1/2021 AOE)\n\nWe announce two kinds of metrics: **superb-rank** and **superb-score**, each with parameter-agnostic and parameter-panelized versions.\n\nType|Parameter-agnostic|Parameter-penalized\n-|-|-\nScoring|$superb_s$|$superb_{sp}$\nRanking|$superb_r$|$superb_{rp}$\n\nIn this challenge, $superb_r$ and $superb_{rp}$ are the primary metrics. When equal rank is found on two different upstreams, $superb_{s}$ or $superb_{sp}$ is used to break the tie. Hence, there will be only two final lists of winners: **Parameter-agnostic** and **Parameter-penalized**.\n\n### Notation\n\nSuppose each task $t$ in all tasks $T$ has a single metric $s_t$, and the score of an upstream $u$ on task $t$ is $s_t(u)$ which has already been transformed to make higher values represent better performance. Eg. We use WAcc here for ASR instead of the raw WER. The upstream $u$ has $|u|$ millions parameters.\n\n### Parameter-agnostic\n\nParameter-agnostic metrics demonstrate the best performance SSL can achieve, and encourages participants to explore any possibility to push the limits.\n\n#### $superb_s$\n\nTo aggregate all task-specific scores $s_t(u)$ into a single static score, we linearly transform each of them into points so that:\n\n- $s_t(fbank) = 0$, The performance of FBANK maps to 0\n- $s_t(sota) = 1000$, The performance of the existing SOTA upstream *for this task* maps to 1000.\n\n$$\np_t(u) = \\dfrac{1000}{s_t({sota}) - s_t({fbank})}\\ (\\ s_t(u) - s_t({fbank})\\ )\n$$\n\nHence, most of the points will sit between 0~1000. The upstream worse than FBANK on this task will get negative points. The upstream better than the task-specific SOTA upstream will get points higher than 1000. The $superb_s$ of the upstream $u$ is the average of $p_t$ over all tasks.\n\n$$\nsuperb_s = \\dfrac{1}{|T|} \\sum_{t \\in T}\\ p_t(u)\n$$\n\nIntuitively, two reference points: FBANK and SOTA decide the typical interested interval for a task-specific metric and scale the task scores to 0~1000 points accordingly. The similar range of points across tasks can then be averaged. Beyond scaling with the pre-defined metric range, this interval further determines *how hard for a task to improve*. For a harder task, its smaller interval at the denominator give the task more credit for any unit improvement.\n\n#### $superb_r$\n\nTo encourage the development on **universal models** instead of models skewed toward a subset of tasks. We use ranking to saturate the improvement when an upstream already become the best for that task. The $superb_r$ for an upstream $u$ is the average number of upstreams which $u$ can win in each task. This metric dynamically depends on all the upsreams $U$ shown on the leaderboard. In the following, $L$ is the number of upstreams which $u$ can win using the metric $x_t$.\n\n$$\nL(x_t, u) = |\\ \\{\\ \\hat{u} \\in U\\ |\\ x_t(u) > x_t(\\hat{u}) \\ \\}\\ |\n$$\n\n$$\nsuperb_r = \\dfrac{1}{|T|} \\sum_{t \\in T} L(s_t, u) = \\dfrac{1}{|T|} \\sum_{t \\in T} L(p_t, u)\n$$\n\n### Parameter-penalized\n\nTo encourage the development of speech SSL on small and green models, we add a metric with penalization on models' parameter size. To gauge the effectiveness and parameter-efficiency of new SSL algorithms, we encourage participants to submit multiple upstreams trained by the same algorithm with the only difference in parameter size.\n\n#### $superb_{sp}$\n\nWe penalize the parameter-agnostic scoring by an upstream $u$'s parameter size $|u|$.\n\n$$\n\\hat{p_t}(u) =\n\\left\\{\n    \\begin{array}{lr}\n        \\frac{p_t(u)}{\\ max(|u|,\\ 1)},& \\text{if } p_t(u) \\geq 0\\\\\n        \\ \\ \\ \\ p_t(u),              & \\text{otherwise}\n    \\end{array}\n\\right.\n$$\n\nSince either the point of the baseline FBANK or its parameter size is 0. The above formula measures how many improvement upon FBANK per parameter. The minimum 1 million parameter size is designed to avoid too small upstreams dominating others by receiving too much credit on a single task. When $p_t(u)$ is negative we do not penalize it, since it is already worse than the zero-parameter FBANK.\n\n$$\nsuperb_{sp} = \\dfrac{1}{|T|} \\sum_{t \\in T}\\ \\hat{p_t}(u)\n$$\n\n#### $superb_{sp}$\n\nSimilar to $superb_r$, we rank all upstreams on the leaderboard with $\\hat{p_t}$.\n\n$$\nsuperb_{rp} = \\dfrac{1}{|T|} \\sum_{t \\in T}\\ L(\\hat{p_t}, u)\n$$\n\n### Conclusion\n\nThe ranking metrics are the primary measures in this challenge and are designed to emphasize an upstream's universally usability. When two upstreams tie on the same rank, the scoring metrics take the tasks' variations and improvement difficulty into account to help the final decision. You can refer to the [public-set leaderboard](leaderboard?subset=Public+Set&track=constrained) for the overal metrics calculation.\n\n#### Reference points\n\nIf a task have multiple metrics, each metric is first tranformed into points or ranks as illustrated above. Then, points or ranks are first averaged in intra-task fashion before being averaged with other task.\n\nTask|PR|SID|ER|ASR|QbE|ASV|SD|ST|SE|SE|SS\n-|-|-|-|-|-|-|-|-|-|-|-\nMetrics|PER|ACC|ACC|WER|MTWV|EER|DER|BLEU|PESQ|STOI|SS\nFBANK|82.01|41.38|48.24|23.18|0.58|9.56|10.05|2.32|2.55|0.9364|9.234\nSOTA|3.53|96.66|67.62|3.62|7.36|5.62|5.11|20.01|2.64|0.9418|10.45\n\n## Winner Minimum Requirements\n\nThe following describes the minimum requirements for a team to win the challenge.\n\n### Submit an upstream model to the hidden-set leaderboard\n\nThe public-set is for the upstream development purpose. You can pre-train your upstream and evaluate it with any method you like. You are required to submit at least one upstream model to the hidden-set leaderboard. The hidden-set leaderboard submission deadline is **Jan 10, 2022**.\n\n### Submission selection\n\nA team can **select at most 2 submissions** among its previous submissions for the final team ranking: one for the parameter-agnostic metrics and another for the parameter-panelized metrics. However, these 2 submissions **must come from the same method** and only differ in parameter size. The deadline for the submission selection is **Jan 13, 2022**.\n\n### System description paper\n\nTo verify the submitted upstream follows the challenge policy, we require each team to submit a system description paper in **AAAI submission format** without the page limit. The paper should describe the method **for the selected submissions**, containing at least the following materials:\n\n- SSL objectives\n- Model architecture\n- Pre-training data\n- Parameter size for each submission\n\nSince all the selected submissions come from the same method, the above materials should be almost identical between submissions except for the parameter size.\n\nThe submission should follow the challenge policy and the paper is expected to be well-written. The deadline for the system description paper is **Jan 13, 2022**.\n\n#### Note 1.\n\nThe system description paper is for the challenge review only and is not considered as our AAAI workshop paper by default, since the [AAAI workshop has the early hard deadlines](https://aaai.org/Conferences/AAAI-22/ws22call/) for both paper submission (**Nov 12, 2021**) and acceptance/rejection announcement (**Dec 3, 2021**). Hence, **we encourage participants to submit their methods' papers early to our AAAI workshop** before Nov 12, 2021. If the method turns out to be similar to that used for the final selected submissions, the same paper can be used as the system description paper.\n\n#### Note 2.\n\nWe plan to work with other conferences and offer presentation & paper submission opportunities.\n\n## Winner Announcement and Presentation\n\nAfter review the system description papers and compare their performance with the hidden-set **private scores**. We will reveal all the private scores and announce the final winners on **January 20, 2022**. The winners will be invited to present their methods in our AAAI workshop.\n\n## Timeline\n\n- Sep 18, 2021: Challenge announcement & [S3PRL](https://github.com/s3prl/s3prl/blob/master/s3prl/downstream/docs/superb.md) released\n- Sep 30, 2021: [Overall metrics](challenge#Overall-Metrics) announcement & [public-set leaderboard](leaderboard?track=constrained&subset=Public+Set) is online and [accepts submissions](submit?type=public)\n- Oct 15, 2021: [Hidden-set leaderboard](leaderboard?track=constrained&subset=Hidden+Dev+Set) is online and [accepts submissions](submit?type=hidden)\n- Nov 12, 2021: [AAAI workshop](https://aaai-sas-2022.github.io/) paper submission deadline (encouraged)\n- Dec 3, 2021: [AAAI workshop](https://aaai-sas-2022.github.io/) paper acceptance / rejection announcement\n- Jan 10, 2022: Hidden-set leaderboard submission deadline\n- Jan 13, 2022: Submission selection & system description paper deadline\n- Jan 20, 2022: Winner announcement & reveal hidden-set private scores\n- Jan 22, 2022: AAAI late [registration](https://aaai.org/Conferences/AAAI-21/registration/) deadline\n- Feb 28 - Mar 1, 2022: [AAAI workshop](https://aaai-sas-2022.github.io/) presentation\n\n## Organizers\n\nHung-yi Lee\n\nShinji Watanabe\n\nAbdelrahman Mohamed\n\nShang-Wen Li\n\nShuyan Dong\n\nHeng-Jui Chang\n\nHsuan-Jui Chen\n\nPo-Han Chi\n\nXuankai Chang\n\nYung-Sung Chuang\n\nTzu-Hsun Feng\n\nTzu-Hsien Huang\n\nWen-Chin Huang\n\nZili Huang\n\nAndy T. Liu\n\nCheng-I Jeff Lai\n\nGuan-Ting Lin\n\nKushal Lakhotia\n\nYist Y. Lin\n\nYassin Omar\n\nJiatong Shi\n\nHsiang-Sheng Tsai\n\nLewis Tunstall\n\nWei-Cheng Tseng\n\nShu-wen Yang\n\n## Hidden-set Committee\n\nXuankai Chang\n\nHsuan-Jui Chen\n\nYung-Sung Chuang\n\nZili Huang\n\nShang-Wen Li\n\nGuan-Ting Lin\n\nYassin Omar\n\nJiatong Shi\n\nHsiang-Sheng Tsai\n\nShu-wen Yang\n\n# Contact\n\nsuperb.announcement@gmail.com\n`\n\nexport default policy\n// using String.raw to avoid escaping in latex expression\n// to meet the parsing format, do things as below\n// remove comment <!-- ...  -->\n// replace ``` with ~~~ (code block)\n// replace <strong> with ** \n// replace math block below $superb_{sp}$ as another ver. (origin ver. can't be render but the reason is unknown)","import React from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { FaBars } from \"react-icons/fa\";\nimport ReactMarkdown from 'react-markdown';\nimport remarkMath from 'remark-math';\nimport rehypeKatex from 'rehype-katex';\nimport remarkGfm from 'remark-gfm';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atomOneLight as colorTheme } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nimport { HashLink } from 'react-router-hash-link';\nimport { ProSidebar, Menu, MenuItem } from 'react-pro-sidebar';\n\nimport { Section } from \"./components/Sections\";\nimport { scrollWithOffset } from \"./utils/scroll-with-offset\";\nimport policy from \"./policy\";\n//import './custom.scss';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    ProSidebar: {\n        position: \"fixed\",\n        top: \"0px\",\n        left: \"0px\",\n        \"padding-top\": \"60px\",\n        color: \"#aaa\",\n        \"background-color\": \"#aeaeae\",\n        boxShadow: \"2px 3px 5px rgba(0, 0, 0, 0.1)\",\n    },\n    BtnToggle: {\n        position: \"fixed\",\n        top: \"80px\",\n        left: \"20px\",\n        fontSize: \"20px\",\n    }\n}));\n\nfunction Challenge(props) {\n    const theme = useTheme();\n    const classes = useStyles();\n    const [toggled, setToggled] = React.useState(false);\n    \n    const markdown_block = (\n        <Section align=\"left\">\n            <ReactMarkdown\n                children={policy}\n                remarkPlugins={[remarkMath, remarkGfm]}\n                rehypePlugins={[rehypeKatex]}\n                components={{\n                    code({ node, inline, className, children, ...props }) {\n                        const match = /language-(\\w+)/.exec(className || '')\n                        return !inline && match ? (\n                            <SyntaxHighlighter\n                                children={String(children).replace(/\\n$/, '')}\n                                language={match[1]}\n                                PreTag=\"div\"\n                                style={colorTheme}\n                                showLineNumbers={true}\n                                {...props}\n                            />\n                        ) : (\n                            <code className={className} {...props}>\n                                {children}\n                            </code>\n                        )\n                    },\n                    a({ href, children, ...props }) {\n                        const match = /.*superbbenchmark\\.org\\/\\w+/.exec(href || '')\n                        return match ? (\n                            <HashLink to={match[0].replace(/.*superbbenchmark\\.org/, \"\") + \"#top\"} {...props}>\n                                {children}\n                            </HashLink>\n                        ) : (\n                            <a href={href} {...props}>\n                                {children}\n                            </a>\n                        )\n                    },\n                    h1({ level, children, ...props }) {\n                        const id = children.toString().replace(/ /g, '-')\n                        return <h1 id={id}>{children}</h1>\n                    },\n                    h2({ level, children, ...props }) {\n                        const id = children.toString().replace(/ /g, '-')\n                        return <h2 id={id}>{children}</h2>\n                    },\n                    h3({ level, children, ...props }) {\n                        const id = children.toString().replace(/ /g, '-')\n                        return <h3 id={id}>{children}</h3>\n                    },\n                    h4({ level, children, ...props }) {\n                        const id = children.toString().replace(/ /g, '-')\n                        return <h4 id={id}>{children}</h4>\n                    },\n                    h5({ level, children, ...props }) {\n                        const id = children.toString().replace(/ /g, '-')\n                        return <h5 id={id}>{children}</h5>\n                    }\n\n                }}\n            />\n        </Section>\n    )\n\n    const headers = policy.split(\"\\n\").filter(e => e.match(/^[#]{1,3}[^#]+$/g))\n\n    function getMenuItem(item) {\n        const id = item.replace(/^[#]+\\s/g, \"\").toString().replace(/ /g, '-')\n        return (\n            <MenuItem>\n                <HashLink to={\"#\" + id} scroll={scrollWithOffset}>\n                    {item.slice(1).replace(/#/g, \"\\xa0\\xa0\")}\n                </HashLink>\n            </MenuItem>\n        )\n    }\n\n    return (\n        <div>\n            <div \n                className={`${classes.BtnToggle}`}\n                onClick={() => setToggled(true)}\n            >\n                <FaBars />\n            </div>\n            <ProSidebar\n                toggled={toggled}\n                onToggle={setToggled}\n                className={`${classes.ProSidebar}`}\n                breakPoint=\"xl\"\n            >\n                <Menu iconShape=\"square\">\n                    {headers.map(getMenuItem)}\n                </Menu>\n            </ProSidebar>\n            {markdown_block}\n        </div>\n    );\n}\n\nexport default Challenge;","import { useState, useCallback, useEffect } from \"react\";\n\nexport const useMarkdown = (url) => {\n    const [markdownText, setMarkdownText] = useState(\"\");\n\n    useEffect(() => {\n        fetch(url).then((res) => res.text()).then((text) => setMarkdownText(text));\n    }, []);\n\n    return markdownText;\n}","import { Section } from \"../components/Sections\";\nimport { HashLink } from \"react-router-hash-link\";\nimport ReactMarkdown from 'react-markdown';\nimport remarkMath from 'remark-math';\nimport rehypeKatex from 'rehype-katex';\nimport remarkGfm from 'remark-gfm';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atomOneLight as colorTheme } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { Title } from \"./Titles\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default function MarkdownBlock({ mdFile })\n{\n    return (\n        <Section align=\"left\">\n            <ReactMarkdown\n                children={mdFile}\n                remarkPlugins={[remarkMath, remarkGfm]}\n                rehypePlugins={[rehypeKatex]}\n                components={{\n                    code({ node, inline, className, children, ...props }) {\n                        const match = /language-(\\w+)/.exec(className || '')\n                        return !inline && match ? (\n                            <SyntaxHighlighter\n                                children={String(children).replace(/\\n$/, '')}\n                                language={match[1]}\n                                PreTag=\"div\"\n                                style={colorTheme}\n                                showLineNumbers={true}\n                                {...props}\n                            />\n                        ) : (\n                            <SyntaxHighlighter\n                                children={String(children).replace(/\\n$/, '')}\n                                PreTag=\"div\"\n                                style={colorTheme}\n                                {...props}\n                            />\n                        )\n                    },\n                    a({ href, children, ...props }) {\n                        const match = /https:/.exec(href || '')\n                        return match ? (\n                            <a href={href} target=\"_blank\" rel=\"noopener noreferrer\" {...props}>\n                                {children}\n                            </a>\n                        ) : (\n                            <a href={\"https://github.com/dynamic-superb/dynamic-superb/blob/main/docs/\" + href} target=\"_blank\" rel=\"noopener noreferrer\" {...props}>\n                                {children}\n                            </a>\n                        )\n                    },\n                    p({ level, children, ...props }) {\n                        const id = children.toString().replace(/ /g, '-')\n                        return <Typography component=\"span\" variant=\"body1\" color=\"textSecondary\">{children}</Typography>\n                    },\n                    h1({ level, children, ...props }) {\n                        const id = children.toString().replace(/ /g, '-')\n                        return <Title id={id} titleComponent={\"h1\"} titleVariant={\"h4\"} titleAlign={\"center\"} title={children}/>\n                    },\n                    h2({ level, children, ...props }) {\n                        const id = children.toString().replace(/ /g, '-')\n                        return <h2 id={id}>{children}</h2>\n                    },\n                    h3({ level, children, ...props }) {\n                        const id = children.toString().replace(/ /g, '-')\n                        return <h3 id={id}>{children}</h3>\n                    },\n                    h4({ level, children, ...props }) {\n                        const id = children.toString().replace(/ /g, '-')\n                        return <h4 id={id}>{children}</h4>\n                    },\n                    h5({ level, children, ...props }) {\n                        const id = children.toString().replace(/ /g, '-')\n                        return <h5 id={id}>{children}</h5>\n                    }\n\n                }}\n            />\n        </Section>\n    )\n}","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport { useMarkdown } from \"./hooks/markdown-file\";\nimport MarkdownBlock from \"./components/MarkdownBlock\";\n\nexport default function CallForTask() {\n    const theme = useTheme();\n    const call_for_task = useMarkdown(\"/call_for_tasks.md\");\n\n    return (\n        <Box margin={theme.spacing(8, 0)} textAlign=\"center\">\n            <MarkdownBlock mdFile={call_for_task} />\n        </Box>\n    );\n}\n","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport { useMarkdown } from \"./hooks/markdown-file\";\nimport MarkdownBlock from \"./components/MarkdownBlock\";\n\nexport default function ReviewProcess() {\n    const theme = useTheme();\n    const review_process = useMarkdown(\"/review_process.md\");\n\n    return (\n        <Box margin={theme.spacing(8, 0)} textAlign=\"center\">\n            <MarkdownBlock mdFile={review_process} />\n        </Box>\n    );\n}\n","import React from 'react';\nimport clsx from 'clsx';\nimport { List } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\n\nimport AdaptiveLink from './AdaptiveLink';\n\n\nconst useStyles = makeStyles({\n  list: {\n    width: 200,\n    paddingLeft: 20,\n    paddingRight: 20,\n  },\n  fullList: {\n    width: 'auto',\n  },\n});\n\nexport default function SwipeableTemporaryDrawer(props) {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  });\n\n  const toggleDrawer = (anchor, open) => (event) => {\n    if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n\n    setState({ ...state, [anchor]: open });\n  };\n\n  const list = (anchor) => (\n    <div\n      className={clsx(classes.list, {\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\n      })}\n      role=\"presentation\"\n      // onClick={toggleDrawer(anchor, false)}\n      onKeyDown={toggleDrawer(anchor, false)}\n    >\n      <List>\n        {props.items(toggleDrawer(anchor, false))}\n      </List>\n    </div>\n  );\n\n  return (\n    <div>\n      {['right'].map((anchor) => (\n        <React.Fragment key={anchor}>\n          <div onClick={toggleDrawer(anchor, true)}>{props.children}</div>\n          <SwipeableDrawer\n            anchor={anchor}\n            open={state[anchor]}\n            onClose={toggleDrawer(anchor, false)}\n            onOpen={toggleDrawer(anchor, true)}\n          >\n            {list(anchor)}\n          </SwipeableDrawer>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  CssBaseline,\n  useScrollTrigger,\n  Slide,\n  Zoom,\n  Fab,\n  Button,\n  Box,\n  Menu,\n  MenuItem,\n  ListItem,\n  ListItemText,\n  Divider,\n} from \"@material-ui/core\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport withWidth from \"@material-ui/core/withWidth\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\n\nimport Drawer from \"./Drawer\";\nimport AdaptiveLink from \"./AdaptiveLink\";\n\nimport { useContext } from \"react\";\nimport { AuthContext } from \"../context/auth-context\";\n\nfunction HideOnScroll(props) {\n  const { children, window } = props;\n  // Note that you normally won't need to set the window ref as useScrollTrigger\n  // will default to window.\n  // This is only being set here because the demo is in an iframe.\n  const trigger = useScrollTrigger({ target: window ? window() : undefined });\n\n  return (\n    <Slide appear={false} direction=\"down\" in={!trigger}>\n      {children}\n    </Slide>\n  );\n}\n\nHideOnScroll.propTypes = {\n  children: PropTypes.element.isRequired,\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window: PropTypes.func,\n};\n\nfunction ScrollTop(props) {\n  const { children, window } = props;\n  const classes = useStyles();\n  let history = useHistory();\n  let location = useLocation();\n\n  // Note that you normally won't need to set the window ref as useScrollTrigger\n  // will default to window.\n  // This is only being set here because the demo is in an iframe.\n  const trigger = useScrollTrigger({\n    target: window ? window() : undefined,\n    disableHysteresis: true,\n    threshold: 100,\n  });\n\n  const handleClick = (event) => {\n    const anchor = (event.target.ownerDocument || document).querySelector(\n      \"#back-to-top-anchor\"\n    );\n\n    if (anchor) {\n      anchor.scrollIntoView({ block: \"center\" });\n      history.push(location.pathname);\n    }\n  };\n\n  return (\n    <Zoom in={trigger}>\n      <div\n        onClick={handleClick}\n        role=\"presentation\"\n        className={classes.root}\n      >\n        {children}\n      </div>\n    </Zoom>\n  );\n}\n\nScrollTop.propTypes = {\n  children: PropTypes.element.isRequired,\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window: PropTypes.func,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"fixed\",\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  },\n  toolbar: {\n    width: \"100%\",\n    maxWidth: 1600,\n    margin: \"auto\",\n    paddingLeft: 20,\n    paddingRight: 20,\n  },\n  tool: {\n    paddingTop: 5,\n    paddingBottom: 5,\n  },\n  button: {\n    paddingLeft: 12,\n    paddingRight: 12,\n    marginLeft: 2,\n    marginRight: 2,\n    borderRadius: 10,\n    border: \"solid 1px transparent\",\n    \"&:hover\": {\n      background: \"rgba(255, 255, 255, 1)\",\n      boxShadow: \"0px 3px 10px rgba(0, 0, 0, 0.1)\",\n    },\n    cursor: \"pointer\",\n  },\n  navlink: {\n    fontWeight: \"inherit\",\n  },\n}));\n\nfunction LiftingBarButton(props) {\n  const classes = useStyles();\n  return (\n    <div className={`${classes.tool} ${classes.button}`}>\n      {props.children}\n    </div>\n  );\n}\n\nfunction NavigationBar({ width, tableControlRef, ...props }) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const location = useLocation();\n  const auth = useContext(AuthContext);\n\n  const [anchorElUser, setAnchorElUser] = React.useState(null);\n  const handleOpenUserMenu = (event) => {\n    setAnchorElUser(event.currentTarget);\n  };\n  const handleCloseUserMenu = () => {\n    setAnchorElUser(null);\n  };\n\n  let items = [\n    //[\"Challenge\", [[\"SLT2023\", \"/challenge-slt2023\"], [\"AAAI2022\", \"/challenge-aaai2022\"]]],\n    [\"Call for Task\", \"/call-for-task\"],\n    [\"Submission\", [[\"Task Submission\", \"/task-submission\"], [\"Score Submission\", \"/score-submission\"]]],\n    [\"Review\", \"/review-process\"],\n    [\"Leaderboard\", \"/leaderboard\"],\n    [\"Github\", \"https://github.com/dynamic-superb/dynamic-superb\"],\n    [\"Paper\", \"https://arxiv.org/abs/2309.09510\"],\n    //[\"Tasks\", \"https://github.com/dynamic-superb/dynamic-superb/blob/main/docs/task_list.md\"],\n    //[\"Leaderboard\", \"https://github.com/dynamic-superb/dynamic-superb/blob/main/docs/leaderboard.md\"],\n  ];\n  /* if (auth.isLoggedIn) {\n    // items.push([\"Submit\", \"/submit\"]);\n    items.push([\"Profile\", \"/profile\"]);\n    items.push([\"Logout\", \"/logout\"]);\n  } else {\n    items.push([\"Login\", \"/login\"]);\n  } */\n\n  const items1 = items.map(([text, link]) =>\n    Array.isArray(link) ?\n      <Box sx={{ flexGrow: 0 }}>\n        <Grid item onClick={handleOpenUserMenu}>\n          <LiftingBarButton >\n            <Typography\n              color=\"textSecondary\"\n              variant=\"overline\"\n              className={classes.navlink}\n              key={text}\n            >\n              {text}\n            </Typography>\n          </LiftingBarButton>\n        </Grid>\n        <Menu\n          sx={{ mt: '45px' }}\n          id=\"menu-appbar\"\n          anchorEl={anchorElUser}\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'right',\n          }}\n          keepMounted\n          transformOrigin={{\n            vertical: -50,\n            horizontal: 'right',\n          }}\n          open={Boolean(anchorElUser)}\n          onClose={handleCloseUserMenu}\n          onMouseLeave={handleCloseUserMenu}\n        >\n          {link.map(([text, link]) =>\n            <MenuItem key={text} onClick={handleCloseUserMenu}>\n              <AdaptiveLink link={link}>\n                <Typography textAlign=\"center\">{text}</Typography>\n              </AdaptiveLink>\n            </MenuItem>\n          )}\n        </Menu>\n      </Box> :\n      <Grid item key={link}>\n        <AdaptiveLink link={link}>\n          <LiftingBarButton>\n            <Typography\n              color=\"textSecondary\"\n              variant=\"overline\"\n              className={classes.navlink}\n              key={text}\n            >\n              {text}\n            </Typography>\n          </LiftingBarButton>\n        </AdaptiveLink>\n      </Grid>\n  );\n\n  const items2 = (onclick) => items.map(([text, link]) =>\n    Array.isArray(link) ?\n      <Box sx={{ flexGrow: 0 }}>\n        <Grid item onClick={handleOpenUserMenu}>\n          <ListItem button>\n            <ListItemText>\n              <Typography\n                color=\"textSecondary\"\n                variant=\"overline\"\n                className={classes.navlink}\n                key={text}\n              >\n                {text}\n              </Typography>\n            </ListItemText>\n          </ListItem>\n        </Grid>\n        <Menu\n          sx={{ mt: '45px', flexGrow: 1 }}\n          id=\"menu-appbar\"\n          anchorEl={anchorElUser}\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'left',\n          }}\n          keepMounted\n          transformOrigin={{\n            vertical: -50,\n            horizontal: 'left',\n          }}\n          open={Boolean(anchorElUser)}\n          onClose={handleCloseUserMenu}\n          onMouseLeave={handleCloseUserMenu}\n        >\n          {link.map(([text, link]) =>\n            <div onClick={onclick}>\n              <MenuItem key={text} onClick={handleCloseUserMenu}>\n                <AdaptiveLink link={link}>\n                  <Typography textAlign=\"center\">{text}</Typography>\n                </AdaptiveLink>\n              </MenuItem>\n            </div>\n          )}\n        </Menu>\n        <Divider />\n      </Box> :\n      <div>\n        <AdaptiveLink link={link}>\n          <ListItem button onClick={onclick}>\n            {/* <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon> */}\n            <ListItemText>\n              <Typography\n                color=\"textSecondary\"\n                variant=\"overline\"\n                className={classes.navlink}\n                key={text}\n              >\n                {text}\n              </Typography>\n            </ListItemText>\n          </ListItem>\n        </AdaptiveLink>\n        <Divider />\n      </div>\n  );\n\n\n  const largeScreen = useMediaQuery(theme.breakpoints.up(\"lg\"));\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <HideOnScroll {...props}>\n        <AppBar color=\"primary\">\n          <Toolbar className={classes.toolbar}>\n            <Grid container alignItems=\"center\">\n              <Grid item xs={9} lg={2}>\n                <Grid\n                  container\n                  direction=\"row\"\n                  justify=\"flex-start\"\n                  alignItems=\"center\"\n                  spacing={1}\n                >\n                  <Grid item>\n                    <AdaptiveLink link=\"/\">\n                      <LiftingBarButton>\n                        <Typography\n                          color=\"textPrimary\"\n                          variant=\"h6\"\n                          className={`${classes.navlink}`}\n                        >\n                          {largeScreen\n                            ? \"Dynamic-SUPERB\"\n                            : \"Dynamic-SUPERB\"}\n                        </Typography>\n                      </LiftingBarButton>\n                    </AdaptiveLink>\n                  </Grid>\n                  {(location.pathname.includes(\n                    \"leaderboard-tmp\"\n                  ) ||\n                    location.pathname.includes(\n                      \"profile\"\n                    )) && (\n                      <Grid item>\n                        <AdaptiveLink link={null}>\n                          <Button\n                            size=\"small\"\n                            variant=\"outlined\"\n                            onClick={() => {\n                              tableControlRef.current.click();\n                            }}\n                          >\n                            {largeScreen\n                              ? \"Help\"\n                              : \"Help\"}\n                          </Button>\n                        </AdaptiveLink>\n                      </Grid>\n                    )}\n                </Grid>\n              </Grid>\n              <Grid item xs={3} lg={10}>\n                <Grid\n                  container\n                  direction=\"row\"\n                  justify=\"flex-end\"\n                  alignItems=\"center\"\n                >\n                  <Hidden mdDown>\n                    {items1}\n                  </Hidden>\n                  <Hidden lgUp>\n                    <Grid item>\n                      <Drawer items={items2}>\n                        <LiftingBarButton>\n                          <Typography\n                            color=\"textSecondary\"\n                            variant=\"overline\"\n                          >\n                            MENU\n                          </Typography>\n                        </LiftingBarButton>\n                      </Drawer>\n                    </Grid>\n                  </Hidden>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Toolbar>\n        </AppBar>\n      </HideOnScroll>\n      <Toolbar id=\"back-to-top-anchor\" />\n      <ScrollTop {...props}>\n        <Fab\n          color=\"secondary\"\n          size=\"small\"\n          aria-label=\"scroll back to top\"\n        >\n          <KeyboardArrowUpIcon />\n        </Fab>\n      </ScrollTop>\n    </React.Fragment>\n  );\n}\n\nexport default withWidth()(NavigationBar);\n","import React from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport {\n  Modal,\n  Backdrop,\n  Fade,\n  Paper,\n  Switch,\n  FormGroup,\n  FormControlLabel,\n  Grid,\n  Box,\n  Typography,\n} from \"@material-ui/core\";\nimport { blueGrey, grey, red, orange, green } from \"@material-ui/core/colors\";\n\nimport { Section, SubSection } from \"./Sections\";\nimport { SubTitle } from \"./Titles\";\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\n\nexport default function TransitionsModal({\n  tableInstance,\n  modalOpenRef = null,\n}) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  const { allColumns, setGlobalFilter } = tableInstance;\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const theme = useTheme();\n  return (\n    <div>\n      {modalOpenRef ? (\n        <div ref={modalOpenRef} onClick={handleOpen} />\n      ) : (\n        <button type=\"button\" onClick={handleOpen}>\n          react-transition-group\n        </button>\n      )}\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={open}>\n          <Box width=\"85%\" maxWidth={700}>\n            <Paper>\n              <Box\n                padding={theme.spacing(4, 6)}\n                margin=\"auto\"\n                maxHeight=\"80vh\"\n                overflow=\"auto\"\n              >\n                <SubSection>\n                  <SubTitle title=\"Leaderboard\" />\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    All the submissions are presented in a single table. You can\n                    use the buttons below to choose which tracks you are\n                    interested or what information (column) you wish to compare.\n                    The default ranking of all submissions are sorted by a\n                    randomly selected task, so the ranking will be different\n                    everytime you refresh the page. You can check the column\n                    with the{\" \"}\n                    <span style={{ color: green[300] }}>green task name</span>{\" \"}\n                    for the current sorting column.\n                  </Typography>\n                </SubSection>\n                <SubSection>\n                  <SubTitle title=\"Toggles\" />\n                  <Box margin={theme.spacing(4, \"auto\", 0)}>\n                    <Grid container direction=\"row\">\n                      {allColumns.map((column) => {\n                        return (\n                          <Grid item xs={12} sm={6} md={4} lg={3}>\n                            <FormControlLabel\n                              control={\n                                <Switch\n                                  checked={column.isVisible}\n                                  onChange={() => {\n                                    column.toggleHidden();\n                                  }}\n                                  name={column.Header}\n                                />\n                              }\n                              label={column.Header}\n                            />\n                          </Grid>\n                        );\n                      })}\n                    </Grid>\n                  </Box>\n                </SubSection>\n              </Box>\n            </Paper>\n          </Box>\n        </Fade>\n      </Modal>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\nimport {\n    useTable,\n    useBlockLayout,\n    useSortBy,\n    useResizeColumns,\n    useGlobalFilter,\n} from \"react-table\";\nimport { useSticky } from \"react-table-sticky\";\nimport InsertLinkIcon from \"@material-ui/icons/InsertLink\";\n\nimport { useTheme, fade } from \"@material-ui/core/styles\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { blueGrey, grey, red, orange, green } from \"@material-ui/core/colors\";\nimport { Typography, TextField } from \"@material-ui/core\";\nimport { Title } from \"./components/Titles\";\nimport { Section } from \"./components/Sections\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport Button from \"@material-ui/core/Button\";\nimport Icon from \"@material-ui/core/Icon\";\nimport CropSquareIcon from \"@material-ui/icons/CropSquare\";\nimport {\n    individual_submission_columnInfo,\n    individual_submission_hidden_columnInfo,\n    leaderboard_selections,\n} from \"./Data\";\nimport { AuthContext } from \"./context/auth-context\";\nimport swal from \"sweetalert\";\nimport Model from \"./components/Modal\";\nimport TrackSelect from \"./components/TrackSelect\";\nimport SubsetSelect from \"./components/SubsetSelect\";\nimport { overall_metric_adder } from \"./overall_metrics\";\nimport { Box, Divider, FormControl, InputLabel, Select, MenuItem, Input, FormControlLabel, Switch } from \"@material-ui/core\";\nimport { NumericalSort, is_number_and_not_nan } from \"./components/Utilies\";\nimport { useLocation } from \"react-router-dom\";\n\nconst Styles = styled.div`\n  .table {\n    outline: 1px solid #ddd;\n\n    .click-btn {\n      cursor: pointer;\n    }\n    \n    .th,\n    .td {\n      background-color: ${(props) => props.theme.palette.primary.main};\n      overflow: hidden;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      border: 0.2px solid #ddd;\n      vertical-align: middle;\n      padding: ${(props) => props.theme.spacing(1, 1)};\n    }\n\n    .th {\n      font-weight: bold;\n      padding: ${(props) => props.theme.spacing(1.5, 1)};\n    }\n\n    .toggle {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    &.sticky {\n      overflow: scroll;\n      .header,\n      .footer {\n        position: sticky;\n        z-index: 1;\n        width: fit-content;\n      }\n\n      .header {\n        top: 0;\n        box-shadow: 0px 3px 3px #ccc;\n      }\n\n      .footer {\n        bottom: 0;\n        box-shadow: 0px -3px 3px #ccc;\n      }\n\n      .body {\n        position: relative;\n        z-index: 0;\n      }\n\n      [data-sticky-td] {\n        position: sticky;\n      }\n\n      [data-sticky-last-left-td] {\n        box-shadow: 2px 2px 3px #ccc;\n      }\n\n      [data-sticky-first-right-td] {\n        box-shadow: -2px -2px 3px #ccc;\n      }\n    }\n  }\n\n  .resizer {\n    display: inline-block;\n    background: ${(props) => `${fade(props.theme.palette.text.primary, 0.2)}`};\n    width: ${(props) => `${props.theme.spacing(2)}px`};\n    height: 100%;\n    position: absolute;\n    right: 0;\n    top: 0;\n    transform: translateX(50%);\n    z-index: 1;\n    ${\"\" /* prevents from scrolling while dragging on touch devices */}\n    touch-action:none;\n\n    &.isResizing, &:hover {\n      background: ${(props) =>\n        `${fade(props.theme.palette.text.primary, 0.6)}`};\n    }\n`;\n\nfunction Table({ columns, data, height = \"500px\", tableControlRef = null }) {\n    const theme = useTheme();\n    const defaultColumn = React.useMemo(\n        () => ({\n            minWidth: 10,\n            width: 150,\n            maxWidth: 400,\n        }),\n        []\n    );\n    const defaultSortby = React.useMemo(() => [\n        {\n            id: \"aoeTimeUpload\",\n            desc: true,\n        },\n    ]);\n\n    const tableInstance = useTable(\n        {\n            columns,\n            data,\n            defaultColumn,\n            initialState: {\n                hiddenColumns: [\n                    \"modelURL\",\n                    \"stride\",\n                    \"inputFormat\",\n                    \"corpus\",\n                    \"paramDesc\",\n                    \"paramShared\",\n                    \"fineTunedParam\",\n                    \"taskSpecParam\",\n                    \"stateInfo\",\n                    \"submitUUID\",\n                ],\n                sortBy: defaultSortby,\n            },\n        },\n        useSortBy,\n        useBlockLayout,\n        useResizeColumns,\n        useSticky\n    );\n\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n        tableInstance;\n\n    return (\n        <Styles theme={theme}>\n            <Model\n                tableInstance={tableInstance}\n                modalOpenRef={tableControlRef}\n            />\n            <div\n                {...getTableProps()}\n                className=\"table sticky\"\n                style={{\n                    width: \"fit-content\",\n                    maxWidth: \"100%\",\n                    maxHeight: height,\n                    margin: \"auto\",\n                }}\n            >\n                <div className=\"header\">\n                    {headerGroups.map((headerGroup) => (\n                        <div\n                            {...headerGroup.getHeaderGroupProps()}\n                            className=\"tr\"\n                        >\n                            {headerGroup.headers.map((column) => {\n                                let color =\n                                    column.isSortedDesc == undefined ||\n                                        column.higherBetter == undefined\n                                        ? theme.palette.text.primary\n                                        : column.isSortedDesc ==\n                                            column.higherBetter\n                                            ? green[300]\n                                            : red[300];\n\n                                return (\n                                    <div\n                                        {...column.getHeaderProps()}\n                                        className=\"th\"\n                                    >\n                                        <div\n                                            {...column.getSortByToggleProps()}\n                                            className=\"toggle\"\n                                        >\n                                            <span\n                                                style={{\n                                                    margin: \"0px 1px\",\n                                                    color: color,\n                                                }}\n                                            >\n                                                {column.render(\"Header\")}\n                                            </span>\n                                            {column.higherBetter != undefined &&\n                                                (column.higherBetter ? (\n                                                    <ArrowUpwardIcon\n                                                        style={{\n                                                            fontSize: 16,\n                                                            color: color,\n                                                        }}\n                                                    />\n                                                ) : (\n                                                    <ArrowDownwardIcon\n                                                        style={{\n                                                            fontSize: 16,\n                                                            color: color,\n                                                        }}\n                                                    />\n                                                ))}\n                                        </div>\n                                        <div\n                                            {...column.getResizerProps()}\n                                            className={`resizer ${column.isResizing\n                                                ? \"isResizing\"\n                                                : \"\"\n                                                }`}\n                                        />\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    ))}\n                </div>\n\n                <div {...getTableBodyProps()} className=\"body\">\n                    {rows.map((row, i) => {\n                        prepareRow(row);\n                        return (\n                            <div {...row.getRowProps()} className=\"tr\">\n                                {row.cells.map((cell) => {\n                                    return (\n                                        <div\n                                            {...cell.getCellProps()}\n                                            className=\"td\"\n                                        >\n                                            {cell.render(\"Cell\")}\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        </Styles>\n    );\n}\n\nfunction useQuery() {\n    return new URLSearchParams(useLocation().search);\n}\n\nfunction Profile(props) {\n    let query = useQuery();\n\n    const theme = useTheme();\n    const auth = useContext(AuthContext);\n    const [allSubmissionData, setAllSubmissionData] = useState([]);\n    const [allHiddenSubmissionData, setAllHiddenSubmissionData] = useState([]);\n    const [shownData, setShownData] = useState([]);\n    const [shownHiddenData, setShownHiddenData] = useState([]);\n    const [task, setTask] = useState(query.get(\"track\") || \"constrained\");\n    const [username, setUsername] = useState(\"\");\n    const [resetUserName, setResetUserName] = useState(\"\");\n    const [dailyCounts, setDailyCounts] = useState(0);\n    const [weeklyCounts, setWeeklyCounts] = useState(0);\n    const [hiddenDailyCounts, setHiddenDailyCounts] = useState(0);\n    const [hiddenWeeklyCounts, setHiddenWeeklyCounts] = useState(0);\n    const [subset, setSubset] = useState(query.get(\"subset\") || \"Paper\");\n    const track = subset.toLowerCase().includes(\"hidden\") ? \"hidden\" : \"public\"\n    const memoizedNumericSort = React.useCallback(NumericalSort);\n\n    // edit hidden score\n    const [editTask, setEditTask] = useState('');\n    const [entireHiddenSubmissionData, setEntireHiddenSubmissionData] = useState([]);\n    const [showAll, setShowAll] = useState(true);\n\n    const mapping_array = {\n        CONSTRAINED: \"constrained\",\n        LESS_CONSTRAINED: \"less-constrained\",\n        UNCONSTRAINED: \"unconstrained\",\n    };\n\n    const getUserName = async () => {\n        await axios({\n            method: \"get\",\n            url: \"/api/user/info\",\n            headers: {\n                Authorization: \"Bearer \" + auth.token,\n            },\n        })\n            .then((res) => {\n                setUsername(res.data.username);\n                setDailyCounts(res.data.daily_counts);\n                setWeeklyCounts(res.data.weekly_counts);\n                setHiddenDailyCounts(res.data.hidden_daily_counts);\n                setHiddenWeeklyCounts(res.data.hidden_weekly_counts);\n            })\n            .catch((error) => {\n                console.error(error);\n            });\n    };\n\n    const handleResetUserName = async () => {\n        await axios({\n            method: \"patch\",\n            url: \"/api/user/info\",\n            headers: {\n                Authorization: \"Bearer \" + auth.token,\n            },\n            data: {\n                name: resetUserName,\n            },\n        })\n            .then((res) => {\n                setUsername(res.data.newUserName);\n                swal({\n                    text: `Reset to ${res.data.newUserName}!`,\n                    icon: \"success\",\n                });\n            })\n            .catch((error) => {\n                swal({ text: \"Internal server error\", icon: \"error\" });\n                console.error(error);\n            });\n    };\n\n    const getIndividualSubmission = async () => {\n        await axios({\n            method: \"get\",\n            url: \"/api/submissions\",\n            headers: {\n                Authorization: \"Bearer \" + auth.token,\n            },\n        })\n            .then((res) => {\n                setAllSubmissionData(res.data.submission_info);\n                // console.log(res.data.submission_info);\n                task === \"all\"\n                    ? setShownData(res.data.submission_info)\n                    : setShownData(\n                        res.data.submission_info.filter(\n                            (data) => mapping_array[data.task] === task\n                        )\n                    );\n            })\n            .catch((error) => {\n                console.error(error);\n            });\n        await axios({\n            method: \"get\",\n            url: \"/api/hiddensubmissions\",\n            headers: {\n                Authorization: \"Bearer \" + auth.token,\n            },\n        })\n            .then((res) => {\n                setAllHiddenSubmissionData(res.data.submission_info);\n                // console.log(res.data.submission_info);\n                task === \"all\"\n                    ? setShownHiddenData(res.data.submission_info)\n                    : setShownHiddenData(\n                        res.data.submission_info.filter(\n                            (data) => mapping_array[data.task] === task\n                        )\n                    );\n            })\n            .catch((error) => {\n                console.error(error);\n            });\n        if (auth.isAdmin) {\n            await axios({\n                method: \"get\",\n                url: \"/api/hiddensearch/\",\n                headers: {\n                    Authorization: \"Bearer \" + auth.token,\n                },\n            })\n                .then((res) => {\n                    setEntireHiddenSubmissionData(res.data.submission_info)\n                })\n                .catch((error) => {\n                    console.error(error);\n                });\n        }\n    };\n\n    const onTaskChange = (e) => {\n        setTask(e.target.value);\n\n        // push history\n        const url = new URL(window.location);\n        url.searchParams.set(\"track\", e.target.value);\n        window.history.pushState({}, '', url);\n\n        let setShown = track === \"hidden\" ? setShownHiddenData : setShownData;\n        let allData = track === \"hidden\" ? allHiddenSubmissionData : allSubmissionData;\n        e.target.value === \"all\"\n            ? setShown(allData)\n            : setShown(\n                allData.filter(\n                    (data) => mapping_array[data.task] === e.target.value\n                )\n            );\n    };\n\n    const handleNameOnChange = (e) => {\n        setResetUserName(e.target.value);\n    };\n\n    const setShowOnLeaderboard = async (submission_id) => {\n        await axios({\n            method: \"patch\",\n            url: (track == \"hidden\" ? \"/api/hiddensubmission/\" : \"/api/submission/\") + submission_id,\n            headers: {\n                Authorization: \"Bearer \" + auth.token,\n            },\n        })\n            .then((res) => {\n                swal({ text: res.data.message, icon: \"success\" });\n                getIndividualSubmission();\n            })\n            .catch((error) => {\n                swal({ text: \"Internal server error\", icon: \"error\" });\n            });\n    };\n    const parseShowCell = ({ row, value }) => {\n        if (value === \"NO\")\n            return (\n                <CropSquareIcon\n                    className=\"click-btn\"\n                    onClick={() => setShowOnLeaderboard(row.original.submitUUID)}\n                ></CropSquareIcon>\n            );\n        else\n            return (\n                <CheckIcon\n                    className=\"click-btn\"\n                    style={{ color: green[500] }}\n                    onClick={() => setShowOnLeaderboard(row.original.submitUUID)}\n                ></CheckIcon>\n            );\n    };\n\n    const parseDownload = ({ row }) => {\n        return (\n            <InsertLinkIcon\n                className=\"click-btn\"\n                onClick={() => downloadPreviousUpload(row.allCells[16].value)}\n            ></InsertLinkIcon>\n        );\n    };\n\n    const downloadPreviousUpload = async (submission_id) => {\n        await axios({\n            method: \"get\",\n            url: \"/api/submission/\" + submission_id,\n            headers: {\n                Authorization: \"Bearer \" + auth.token,\n            },\n            responseType: \"blob\",\n        })\n            .then((data) => {\n                let blob = new Blob([data.data], { type: \"application.zip\" });\n                const link = document.createElement(\"a\");\n                const url = URL.createObjectURL(blob);\n                link.href = url;\n                link.download = \"predict.zip\";\n                link.click();\n            })\n            .catch((error) => {\n                swal({ text: \"Internal server error\", icon: \"error\" });\n            });\n    };\n\n    const parseModelURL = ({ value }) => {\n        if (value === \"-\") return String(value);\n        else\n            return (\n                <a href={value}>\n                    <InsertLinkIcon style={{ height: \"20px\" }}></InsertLinkIcon>\n                </a>\n            );\n    };\n\n    useEffect(() => {\n        getIndividualSubmission();\n        getUserName();\n    }, [auth.isAdmin]);\n\n    const patchhiddenscore = async () => {\n        if (auth.isAdmin) {\n            let submissionID = document.getElementById(\"submission-id\").value;\n            let editValue = document.getElementById(\"edit-value\").value;\n\n            await axios({\n                method: \"patch\",\n                url: `/api/hiddenmodify/${submissionID}&${editTask}&${editValue}`,\n                headers: {\n                    Authorization: \"Bearer \" + auth.token,\n                },\n            })\n                .then((res) => {\n                    swal({ text: res.data.message, icon: \"success\" });\n                    getIndividualSubmission();\n                })\n                .catch((error) => {\n                    swal({ text: \"Internal server error\", icon: \"error\" });\n                });\n        }\n    }\n\n    let columnInfo = track == \"hidden\" ? individual_submission_hidden_columnInfo : individual_submission_columnInfo;\n    let columns = Object.keys(columnInfo).map((key) => {\n        let isScore = columnInfo[key].isScore\n        return {\n            Header: columnInfo[key].header,\n            accessor: key,\n            width: columnInfo[key].width,\n            sortType:\n                columnInfo[key] == \"number\"\n                    ? memoizedNumericSort\n                    : \"alphanumeric\",\n            higherBetter: columnInfo[key].higherBetter,\n            isScore: isScore,\n            Cell:\n                key === \"showOnLeaderboard\"\n                    ? parseShowCell\n                    : key === \"modelURL\"\n                        ? parseModelURL\n                        : key === \"download\" && track === \"public\"\n                            ? parseDownload\n                            : ({ value }) => isScore ? (is_number_and_not_nan(value) ? String(Math.round(value * 100) / 100) : \"-\") : (value == undefined ? \"-\" : String(value)),\n        };\n    });\n    columns[0][\"sticky\"] = \"left\";\n\n    const onSubsetChange = (e) => {\n        setSubset(e.target.value);\n\n        // push history\n        const url = new URL(window.location);\n        url.searchParams.set(\"subset\", e.target.value);\n        window.history.pushState({}, '', url);\n    };\n\n    let trimmedColumns, trimmedShownData;\n    let data;\n    if (track == \"hidden\") {\n        if (showAll && auth.isAdmin) {\n            data = entireHiddenSubmissionData;\n        }\n        else {\n            data = shownHiddenData;\n        }\n    }\n    else {\n        data = shownData\n    }\n    [trimmedColumns, trimmedShownData] = overall_metric_adder([\"interpolation\", \"interpolation_p\"], columns, data, subset, memoizedNumericSort)\n    const memoColumns = React.useMemo(() => trimmedColumns);\n\n    const resetbtnstyle = {\n        margin: 10,\n    };\n\n    return (\n        <>\n            <Section anchorKey=\"personal-profile\" margin={theme.spacing(8, \"auto\", 1)}>\n                <Title\n                    title={\"Hello \" + username}\n                    description={\n                        <div>\n                            <p><span>Public submissions: </span><strong>{`${dailyCounts}/day, ${weeklyCounts}/week`}</strong></p>\n                            <p><span>Hidden submissions: </span><strong>{`${hiddenDailyCounts}/day, ${hiddenWeeklyCounts}/week`}</strong></p>\n                        </div>\n                    }\n                />\n                <TextField\n                    required\n                    label=\"Reset your name\"\n                    id=\"name-reset\"\n                    defaultValue={username}\n                    size=\"small\"\n                    color=\"secondary\"\n                    onChange={handleNameOnChange}\n                />\n                <Button\n                    variant=\"contained\"\n                    size=\"small\"\n                    className=\"reset-name-btn\"\n                    style={resetbtnstyle}\n                    onClick={handleResetUserName}\n                >\n                    Reset\n                </Button>\n            </Section>\n            <Section anchorKey=\"personal-submission\">\n                <Title\n                    title=\"Submission history\"\n                    description=\"You can check the checkbox to show your submission result(s) on the leaderboard.\"\n                />\n                <Box width=\"90%\" margin=\"auto\">\n                    {\n                        auth.isAdmin &&\n                        <>\n                            <FormControlLabel\n                                control={<Switch checked={showAll} onChange={(e) => { setShowAll(e.target.checked) }} name=\"showAll\" />}\n                                label=\"All Submissions\"\n                            />\n                            <Divider style={{ width: \"600px\", maxWidth: \"80%\", margin: \"auto\" }} />\n                        </>\n                    }\n                    <Box margin={theme.spacing(2, \"auto\", 0.2)}>\n                        <TrackSelect task={task} onTaskChange={onTaskChange} />\n                    </Box>\n                    <Divider style={{ width: \"600px\", maxWidth: \"80%\", margin: \"auto\" }} />\n                    <Box margin={theme.spacing(0.2, \"auto\", 1)}>\n                        <SubsetSelect subset={subset} selections={[\"Paper\", \"Public Set\", \"Hidden Dev Set\"]} onChange={onSubsetChange} />\n                    </Box>\n                </Box>\n                <Table columns={memoColumns} data={trimmedShownData} {...props} />\n                {\n                    auth.isAdmin &&\n                    <Section>\n                        <Box margin=\"10px\">\n                            <Title\n                                title=\"Edit Hidden Score\"\n                                description=\"Great power comes with great responsibility.\"\n                            />\n                            <FormControl style={{ margin: \"10px\" }}>\n                                <InputLabel style={{ color: grey[600] }} htmlFor=\"submission-id\">Submission ID</InputLabel>\n                                <Input id=\"submission-id\" />\n                            </FormControl>\n                            <FormControl style={{ width: \"200px\", margin: \"10px\" }}>\n                                <InputLabel id=\"demo-customized-select-label\">Task</InputLabel>\n                                <Select\n                                    labelId=\"demo-customized-select-label\"\n                                    id=\"demo-customized-select\"\n                                    value={editTask}\n                                    onChange={(e) => { setEditTask(e.target.value) }}\n                                >\n                                    {\n                                        Object.keys(individual_submission_hidden_columnInfo).map((key) => {\n                                            return (\n                                                individual_submission_hidden_columnInfo[key].isScore &&\n                                                <MenuItem value={key}>{key}</MenuItem>\n                                            )\n                                        })\n                                    }\n                                </Select>\n                            </FormControl>\n                            <FormControl style={{ margin: \"10px\" }}>\n                                <InputLabel style={{ color: grey[600] }} htmlFor=\"edit-value\">Edit Value</InputLabel>\n                                <Input id=\"edit-value\" />\n                            </FormControl>\n                        </Box>\n                        <Button color=\"primary\" variant=\"contained\" onClick={patchhiddenscore}>Edit</Button>\n                    </Section>\n                }\n            </Section>\n        </>\n    );\n}\n\nexport default Profile;\n","import { useState, useCallback, useEffect } from \"react\";\nimport { useGoogleLogout } from \"react-google-login\";\n\nlet logoutTimer;\n\nconst clientId =\n    \"796679159105-6335p2q2ub5pr15lnf3g2cqkhnucmvkl.apps.googleusercontent.com\";\n\nexport const useAuth = () => {\n    const [token, setToken] = useState(false);\n    const [isAdmin, setIsAdmin] = useState(false);\n    const [email, setEmail] = useState(null);\n    const [tokenExpirationDate, setTokenExpirationDate] = useState();\n\n    const onFailure = () => {};\n    const onLogoutSuccess = () => {};\n    const { signOut } = useGoogleLogout({\n        clientId,\n        onLogoutSuccess,\n        onFailure,\n    });\n\n    const login = useCallback((token, expirationDate, isAdmin, email) => {\n        const tokenExpirationDate =\n            expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\n        isAdmin = isAdmin || false;\n        email = email || null;\n\n        setToken(token);\n        setTokenExpirationDate(tokenExpirationDate);\n        setIsAdmin(isAdmin);\n        setEmail(email);\n        localStorage.setItem(\n            \"data\",\n            JSON.stringify({\n                token: token,\n                expiration: tokenExpirationDate.toISOString(),\n                isAdmin: isAdmin,\n                email: email,\n            })\n        );\n    }, []);\n\n    const logout = useCallback(() => {\n        signOut();\n        setToken(null);\n        setTokenExpirationDate(null);\n        setIsAdmin(false);\n        setEmail(null);\n        localStorage.removeItem(\"data\");\n    }, []);\n\n    useEffect(() => {\n        if (token && tokenExpirationDate) {\n            const remainingTime =\n                tokenExpirationDate.getTime() - new Date().getTime();\n            logoutTimer = setTimeout(logout, remainingTime);\n        } else {\n            clearTimeout(logoutTimer);\n        }\n    }, [token, logout, tokenExpirationDate]);\n\n    useEffect(() => {\n        const storedData = JSON.parse(localStorage.getItem(\"data\"));\n        if (\n            storedData &&\n            storedData.token &&\n            new Date(storedData.expiration) > new Date() &&\n            storedData.email\n        ) {\n            login(storedData.token, new Date(storedData.expiration), storedData.isAdmin, storedData.email);\n        }\n        else {\n            logout()\n        }\n    }, [login]);\n\n    return { token, isAdmin, email, login, logout };\n};\n","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport { useMarkdown } from \"./hooks/markdown-file\";\nimport MarkdownBlock from \"./components/MarkdownBlock\";\n\nexport default function TaskSubmission() {\n    const theme = useTheme();\n    const task_submission = useMarkdown(\"/task_submission.md\");\n\n    return (\n        <Box margin={theme.spacing(8, 0)} textAlign=\"center\">\n            <MarkdownBlock mdFile={task_submission} />\n        </Box>\n    );\n}","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport { useMarkdown } from \"./hooks/markdown-file\";\nimport MarkdownBlock from \"./components/MarkdownBlock\";\n\nexport default function ScoreSubmission() {\n    const theme = useTheme();\n    const task_submission = useMarkdown(\"/score_submission.md\");\n\n    return (\n        <Box margin={theme.spacing(8, 0)} textAlign=\"center\">\n            <MarkdownBlock mdFile={task_submission} />\n        </Box>\n    );\n}","import \"./App.css\";\nimport React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n} from \"react-router-dom\";\nimport {\n    useTheme,\n    ThemeProvider,\n    makeStyles,\n    createMuiTheme,\n} from \"@material-ui/core/styles\";\n\nimport Landing from \"./Landing\";\nimport News from \"./News\";\nimport Tasks from \"./Tasks\";\nimport Rules from \"./Rules\";\nimport Compare from \"./Compare\";\nimport Leaderboard from \"./Leaderboard\";\nimport Challenge from './Challenge';\nimport CallForTask from './CallForTask';\nimport ReviewProcess from \"./review_process\";\nimport NavigationBar from \"./components/NavigationBar\";\nimport LeaderBoard from \"./Leaderboard\";\nimport Login from \"./components/Login\";\nimport Logout from \"./components/Logout\";\nimport SubmitForm from \"./components/SubmitForm\";\nimport Profile from \"./Profile\";\nimport { mainTheme } from \"./components/Theme\";\nimport { AuthContext } from \"./context/auth-context\";\nimport { useAuth } from \"./hooks/auth-hook\";\nimport { useContext } from \"react\";\nimport TaskSubmission from \"./task_submission\";\nimport ScoreSubmission from \"./score_submission\";\n\nconst useStyles = makeStyles((theme) => ({\n    narrowViewport: {\n        width: \"85%\",\n        maxWidth: 900,\n        margin: \"auto\",\n    },\n    LoginButton: {\n        height: \"30vh\",\n        paddingTop: \"10vh\",\n    },\n}));\n\nfunction App() {\n    const [width, setWidth] = React.useState(0);\n    const [height, setHeight] = React.useState(0);\n    const [navbarHeight, setNavbarHeight] = React.useState(0);\n    const tableControlRef = React.useRef(null);\n\n    const setViewPort = () => {\n        setWidth(window.innerWidth);\n        setHeight(window.innerHeight);\n        setNavbarHeight(document.getElementById(\"navbar\").offsetHeight);\n    };\n    React.useEffect(setViewPort);\n    window.addEventListener(\"resize\", setViewPort);\n\n    const classes = useStyles();\n    let routes = (\n        <Switch>\n            <Route path=\"/\" exact>\n                <div className={`${classes.narrowViewport}`}>\n                    <Landing />\n                </div>\n            </Route>\n            <Route path=\"/tasks\">\n                <div className={`${classes.narrowViewport}`}>\n                    <Tasks />\n                </div>\n            </Route>\n            <Route path=\"/call-for-task\">\n                <div className={`${classes.narrowViewport}`}>\n                    <CallForTask />\n                </div>\n            </Route>\n            <Route path=\"/task-submission\">\n                <div className={`${classes.narrowViewport}`}>\n                    <TaskSubmission />\n                </div>\n            </Route>\n            <Route path=\"/score-submission\">\n                <div className={`${classes.narrowViewport}`}>\n                    <ScoreSubmission />\n                </div>\n            </Route>\n            <Route path=\"/review-process\">\n                <div className={`${classes.narrowViewport}`}>\n                    <ReviewProcess />\n                </div>\n            </Route>\n            <Route path=\"/leaderboard\">\n                <div>\n                    <LeaderBoard />\n                </div>\n            </Route>\n            {/*<Route path=\"/leaderboard\">\n                <Leaderboard\n                    height={`${height - navbarHeight}px`}\n                    tableControlRef={tableControlRef}\n                />\n            </Route>*/}\n        </Switch>\n    );\n    return (\n        <div className=\"App\">\n            <Router>\n                <div id=\"navbar\">\n                    <NavigationBar tableControlRef={tableControlRef} />\n                </div>\n                {routes}\n            </Router>\n        </div>\n    );\n}\n\nexport default () => {\n    const { token, isAdmin, email, login, logout } = useAuth();\n    return (\n        <ThemeProvider theme={createMuiTheme(mainTheme)}>\n            <App />\n        </ThemeProvider>\n    );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './override.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}